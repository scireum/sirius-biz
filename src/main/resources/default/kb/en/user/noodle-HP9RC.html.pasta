<k:article code="HP9RC" lang="de" parent="AHJEC" title="Noodle Scripting" permissions="">
    <i:block name="description">Defines the syntax of the Noodle Scripting Language.</i:block>

    <i:block name="sidebar">
        <k:toc>
            <k:tocLink link="#common">Common</k:tocLink>
            <k:tocLink link="#special-syntax-and-semantics">Special Syntax and Semantics</k:tocLink>
        </k:toc>
    </i:block>

    <k:section heading="Common" anchor="common">
        <p>
            <b>Noodle</b> is a statically typed and compiled language which tries to resemble <b>Java</b> as much
            as possible. Note however, that some simplifications are present.
        </p>
        <p>
            Noodle supports the following expressions:
        </p>
        <ul>
            <li>Atoms like numbers, Strings or boolean values: <k:inlineCode>42, "Hello", true</k:inlineCode></li>
            <li>Class literals to reference a Java-Class: <k:inlineCode>Strings.class</k:inlineCode></li>
            <li>
                Lambda expressions are supported, but use a simpler syntax than Java:
                <k:inlineCode>| arg1, arg2 | { arg1 + arg2 }</k:inlineCode>
            </li>
            <li>
                Common boolean and numeric operations are supported:
                <k:inlineCode>3 + 4</k:inlineCode> or
                <k:inlineCode>a && b</k:inlineCode>
            </li>
            <li>
                Method calls:
                <k:inlineCode>"test".toUpperCase()</k:inlineCode> or
                <k:inlineCode>Strings.isEmpty("test")</k:inlineCode>
            </li>
            <li>
                Macro calls: <k:inlineCode>isEmpty("test")</k:inlineCode>. All available macros are listed here:
                <k:link link="/system/tags" target="_blank">Tagliatelle Tag Overview</k:link>
            </li>
            <li>
                If statements: <k:inlineCode>if (condition) { statements; }</k:inlineCode>
            </li>
            <li>
                For statements: <k:inlineCode>for (Type variable : iterable) { loop-statements; }</k:inlineCode>
            </li>
            <li>
                Return statements: <k:inlineCode>return expression</k:inlineCode>
            </li>
        </ul>
        <p>
            Noodle supports line comments, starting with <k:inlineCode>//</k:inlineCode> and block comments
            wrapped in <k:inlineCode>/*</k:inlineCode> and <k:inlineCode>*/</k:inlineCode>.
        </p>
    </k:section>
    <k:section heading="Special Syntax and Semantics" anchor="special-syntax-and-semantics">
        <p>
            In contrast to Java <k:inlineCode>==</k:inlineCode> will invoke <k:inlineCode>equals</k:inlineCode> instead
            of checking for object identity. Therefore, this can be used for Strings directly.
        </p>
        <p>
            Noodle will deduce the types as much as possible. If however a type check or a cast becomes necessary, the
            functions <k:inlineCode>x.is(Some.class)</k:inlineCode> and <k:inlineCode>x.as(Some.class)</k:inlineCode>
            can be used to check for or cast to the given type.
        </p>
    </k:section>
</k:article>

<i:arg name="name" type="String" default=""/>
<i:arg name="allowFiles" type="boolean"/>
<i:arg name="allowDirectories" type="boolean"/>
<i:arg name="fieldName" type="String" default="@name"/>
<i:arg name="value" type="String"/>
<i:arg name="basePath" type="String" default=""
       description="Provides the base path which is first opened in the modal when no value is present."/>
<i:arg type="String" name="allowedExtensions" default=""
       description="This is a comma separated list allowed file extensions. Eg.: .mp4,.mpeg"/>
<i:arg name="labelKey" type="String" default=""/>
<i:arg name="label" type="String" default="@i18n(labelKey)"/>
<i:arg name="helpKey" type="String" default=""/>
<i:arg name="help" type="String" default="@i18n(helpKey)"/>
<i:arg name="readonly" type="boolean" default="false"/>
<i:arg name="autofocus" type="boolean" default="false"/>
<i:arg name="id" type="String" default=""/>
<i:arg name="placeholder" type="String" default=""/>
<i:arg name="tabIndex" type="String" default=""/>
<i:arg name="class" type="String" default="" description="Lists additional CSS classes to apply to the form group."/>
<i:arg name="fieldClass" type="String" default=""
       description="Lists additional CSS classes to apply to the input field."/>

<i:local name="localId" value="@generateId('filefield-%s')"/>

<i:pragma name="description"
          value="Renders a text input field along with a select file button within a Wondergem template"/>

<div class="form-group @UserContext.get().signalFieldError(name) @class">
    <i:if test="isFilled(label)">
        <label>
        <span>
            @label
        </span>
        </label>
    </i:if>
    <div id="@localId" class="input-group">
        <input @if(isFilled(fieldName)) { name="@fieldName" }
               @if(isFilled(id)) { id="@id" }
               type="text"
               value="@UserContext.get().getFieldValue(name, value)"
               class="form-control input-block-level @fieldClass"
               @if (isFilled(placeholder)) { placeholder="@placeholder" }
               @if (readonly) { readonly } @if (autofocus) { autofocus }
               @if (isFilled(tabIndex)) { tabindex="@tabIndex" }/>
        <div class="input-group-append select-btn">
            <span class="input-group-text">
                <span class="fa fa-cloud-upload-alt"></span>
            </span>
        </div>
    </div>
    <div id="sirius-upload-progress-@localId" class="mt-3 mb-3 dropzone-items">
        <div class="sirius-upload-hover h-100 d-none flex-column align-items-center justify-content-center">
            <i class="fa fa-2x fa-cloud-upload-alt"></i>
            <span>@i18n("template.html.uploadArea")</span>
        </div>
    </div>

    <script type="text/javascript">
        sirius.ready(function () {
            let _input = document.querySelector('#___localId input');
            new Dropzone("#sirius-upload-progress-@localId", {
                url: function (files) {
                    let value = _input.value;

                    if (value == null || value === '') {
                        value = '@basePath';
                    } else {
                        value = value.substr(0, value.lastIndexOf("/"))
                    }
                    return '/fs/upload?filename=' + encodeURIComponent(files[0].name) + '&path='  + value;
                },
                sendFileAsBody: true,
                parallelUploads: 1,
                maxFilesize: null,
                acceptedFiles: '___allowedExtensions',
                previewTemplate: '' +
                    '<div class="dropzone-item">\n' +
                    '   <div class="dropzone-file">\n' +
                    '       <div class="dropzone-filename">\n' +
                    '           <span data-dz-name></span>\n' +
                    '           <strong>(<span data-dz-size></span>)</strong>\n' +
                    '           <span class="dz-success-mark">✔</span>\n' +
                    '           <span class="dz-error-mark">✘</span>\n' +
                    '       </div>\n' +
                    '       <div class="dropzone-error" data-dz-errormessage></div>\n' +
                    '   </div>\n' +
                    '\n' +
                    '   <div class="dropzone-progress d-flex">\n' +
                    '       <div class="progress flex-grow-1">\n' +
                    '           <div class="progress-bar bg-primary" role="progressbar" aria-valuemin="0" aria-valuemax="100" ' +
                    '                         aria-valuenow="0" data-dz-uploadprogress>' +
                    '           </div>\n' +
                    '       </div>\n' +
                    '       <span class="dropzone-delete ml-4" data-dz-remove><i class="fa fa-times"></i></span>\n' +
                    '   </div>\n' +
                    '</div>',
                previewsContainer: '#sirius-upload-progress-@localId',
                clickable: '#sirius-upload-progress-@localId',
                error: function (file, message) {
                    if (file.status === Dropzone.CANCELED) {
                        // no need to show error to the user
                        return;
                    }
                    if (file.previewElement) {
                        file.previewElement.classList.add('dz-error');

                        if (typeof message !== 'string' && message.message) {
                            message = message.message;
                        }

                        file.previewElement.querySelector('[data-dz-errormessage]').innerHTML = message;

                        clearMessages();
                        addErrorMessage(message);
                        setTimeout(function () {
                            file.previewElement.remove();
                        }, 500);

                    }
                },
                init: function () {
                    const dropzone = this;
                    let previewsContainer = '#sirius-upload-progress-@localId';

                    if (previewsContainer) {
                        let _dropzoneIndicator = document.querySelector(previewsContainer + ' .sirius-upload-hover');

                        function hideIndicators() {
                            document.querySelectorAll('.sirius-upload-hover').forEach(function (_indicator) {
                                _indicator.classList.remove('d-flex');
                                _indicator.classList.add('d-none');
                                _indicator.classList.remove('sirius-upload-hover-active');
                            });
                        }

                        document.addEventListener('dragenter', function (event) {
                            document.querySelectorAll('.sirius-upload-hover').forEach(function (_indicator) {
                                _indicator.classList.add('d-flex');
                                _indicator.classList.remove('d-none');
                            });
                        }, false);
                        document.addEventListener('dragover', function (event) {
                            event.preventDefault();
                        });
                        document.addEventListener('dragend', function (event) {
                            hideIndicators();
                        }, false);
                        document.addEventListener('drop', function (event) {
                            hideIndicators();
                        }, false);
                        document.addEventListener('dragleave', function (event) {
                            if (event.relatedTarget === null) {
                                // left window
                                hideIndicators();
                            }
                        }, false);
                        _dropzoneIndicator.addEventListener('dragenter', function (event) {
                            _dropzoneIndicator.classList.add('sirius-upload-hover-active');
                        });
                        _dropzoneIndicator.addEventListener('dragleave', function (event) {
                            _dropzoneIndicator.classList.remove('sirius-upload-hover-active');
                        });
                        _dropzoneIndicator.addEventListener('dragover', function (event) {
                            event.preventDefault();
                        });
                        _dropzoneIndicator.addEventListener('drop', function (event) {
                            event.preventDefault();
                        });
                        dropzone.on('drop', function () {
                            hideIndicators();
                        });
                    }
                    this.on('sending', function (file, xhr, formData) {
                        let value = _input.value;

                        if (value == null || value === '') {
                            value = '@basePath';
                        } else {
                            value = value.substr(0, value.lastIndexOf("/"))
                        }
                        formData.append('filename', file.name);
                        formData.append('path', value);
                    });
                    this.on('success', function (file, response) {
                        if (file.previewElement) {
                            setTimeout(function () {
                                file.previewElement.remove();
                            }, 500);
                        }
                        if (response.error) {
                            file.previewElement.classList.add('dz-error');
                            file.previewElement.classList.remove('dz-success');
                            clearMessages();
                            addErrorMessage(response.message);
                        } else {
                            _input.value = response.file;
                            sirius.dispatchEvent("change", _input);
                        }
                    });
                }
            });
            document.querySelector('#___localId .select-btn').addEventListener('click', function () {
                let value = _input.value;

                if (value == null || value === '') {
                    value = '@basePath';
                } else {
                    value = value.substr(0, value.lastIndexOf("/"))
                }
                selectVFSFile({
                    path: value,
                    allowUpload: true,
                    allowDirectories: ___allowDirectories,
                    allowFiles: ___allowFiles,
                    allowedExtensions: '___allowedExtensions',
                    modalTitle: ___allowDirectories ? (___allowFiles ? '___i18n("VFSController.selectFileOrDirectory")' : '___i18n("VFSController.selectDirectory")') : '___i18n("VFSController.selectFile")'
                }).then(function (selectedValue) {
                    _input.value = selectedValue;
                    sirius.dispatchEvent("change", _input);
                });
            });
        });
    </script>

    <i:if test="isFilled(help)">
        <small class="form-text text-muted">
            <i:raw>@expandMessage(help)</i:raw>
        </small>
    </i:if>
    <i:if test="UserContext.get().hasError(name)">
        <small class="error-block form-text">@UserContext.get().getFieldErrorMessage(name)</small>
    </i:if>
</div>

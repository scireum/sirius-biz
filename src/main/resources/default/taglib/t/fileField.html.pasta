<i:arg name="name" type="String" default=""/>
<i:arg name="allowFiles" type="boolean"/>
<i:arg name="allowDirectories" type="boolean"/>
<i:arg name="fieldName" type="String" default="@name"/>
<i:arg name="value" type="String"/>
<i:arg name="basePath" type="String" default=""
       description="Provides the base path which is first opened in the modal when no value is present."/>
<i:arg type="String" name="allowedExtensions" default=""
       description="This is a comma separated list allowed file extensions. Eg.: .mp4,.mpeg"/>
<i:arg name="labelKey" type="String" default=""/>
<i:arg name="label" type="String" default="@i18n(labelKey)"/>
<i:arg name="helpKey" type="String" default=""/>
<i:arg name="help" type="String" default="@i18n(helpKey)"/>
<i:arg name="readonly" type="boolean" default="false"/>
<i:arg name="autofocus" type="boolean" default="false"/>
<i:arg name="id" type="String" default=""/>
<i:arg name="placeholder" type="String" default=""/>
<i:arg name="tabIndex" type="String" default=""/>
<i:arg name="class" type="String" default="" description="Lists additional CSS classes to apply to the form group."/>
<i:arg name="fieldClass" type="String" default=""
       description="Lists additional CSS classes to apply to the input field."/>

<i:local name="localId" value="@generateId('filefield-%s')"/>

<i:pragma name="description"
          value="Renders a text input field along with a select file button within a Tycho template"/>

<div class="form-group @UserContext.get().signalFieldError(name) @class">
    <i:if test="isFilled(label)">
        <label>
        <span>
            @label
        </span>
        </label>
    </i:if>
    <div id="@localId" class="input-group">
        <input @if(isFilled(fieldName)) { name="@fieldName" }
               @if(isFilled(id)) { id="@id" }
               type="text"
               value="@UserContext.get().getFieldValue(name, value)"
               class="form-control input-block-level @fieldClass"
               @if (isFilled(placeholder)) { placeholder="@placeholder" }
               @if (readonly) { readonly } @if (autofocus) { autofocus }
               @if (isFilled(tabIndex)) { tabindex="@tabIndex" }/>
        <div class="input-group-append select-btn">
            <span class="input-group-text">
                <span class="fa-solid @if (allowFiles) {fa-cloud-upload-alt} else {fa-folder-open} cursor-pointer"></span>
            </span>
        </div>
    </div>
    <i:if test="allowFiles && isFilled(basePath)">
        <div id="sirius-upload-progress-@localId" class="mt-3 d-none mb-3 dropzone-items">
            <div class="sirius-upload-hover d-flex h-100 flex-column align-items-center justify-content-center">
                <i class="fa-solid fa-2x fa-cloud-upload-alt"></i>
                <span>@i18n("template.html.uploadArea")</span>
            </div>
        </div>
    </i:if>

    <script type="text/javascript">
        sirius.ready(function () {
            let _input = document.querySelector('#___localId input');
            if (___allowFiles && ___isFilled(basePath)) {
                createInplaceDropzone('___basePath', '___localId', _input, '___allowedExtensions', '___i18n("VirtualFile.onlyOneFile")');
            }
            document.querySelector('#___localId .select-btn').addEventListener('click', function () {
                let value = _input.value;

                if (value == null || value === '') {
                    value = '@basePath';
                } else {
                    value = value.substr(0, value.lastIndexOf("/"))
                }
                selectVFSFile({
                    _input: _input,
                    basePath: '___basePath',
                    path: value,
                    allowDirectories: ___allowDirectories,
                    allowFiles: ___allowFiles,
                    allowedExtensions: '___allowedExtensions',
                    dictMaxFilesExceeded: '___i18n("VirtualFile.onlyOneFile")',
                    modalTitle: ___allowDirectories ? (___allowFiles ? '___i18n("VFSController.selectFileOrDirectory")' : '___i18n("VFSController.selectDirectory")') : '___i18n("VFSController.selectFile")'
                }).then(function (selectedValue) {
                    _input.value = selectedValue;
                    sirius.dispatchEvent("change", _input);
                });
            });
        });
    </script>

    <i:if test="isFilled(help)">
        <small class="form-text text-muted">
            <i:raw>@expandMessage(help)</i:raw>
        </small>
    </i:if>
    <i:if test="UserContext.get().hasError(name)">
        <small class="error-block form-text">@UserContext.get().getFieldErrorMessage(name)</small>
    </i:if>
</div>

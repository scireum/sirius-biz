<i:arg name="name" type="String"/>
<i:arg name="values" type="sirius.biz.codelists.LookupValues"/>
<i:arg name="labelKey" type="String" default=""/>
<i:arg name="label" type="String" default="@i18n(labelKey)"/>
<i:arg name="helpKey" type="String" default=""/>
<i:arg name="help" type="String" default="@i18n(helpKey)"/>
<i:arg name="readonly" type="boolean" default="false"/>
<i:arg name="showSelectionButton" type="boolean" default="true"/>
<i:arg name="table" type="String" default="@values.getTableName()"/>
<i:arg name="id" type="String" default="@generateId('singleselect-%s')"/>
<i:arg name="class" type="String" default="" description="Lists additional CSS classes to apply to the field."/>


<i:pragma name="inline" value="true"/>
<i:pragma name="description" value="Renders a multiselect dropdown field for LookupValues field"/>


<t:multiSelect name="@name"
               label="@label"
               help="@help"
               readonly="@readonly"
               id="@id"
               allowCustomEntries="@values.acceptsCustomValues()"
               class="@class"
               suggestionUri="@apply('/system/lookuptable/autocomplete/%s/%s/%s', table, values.getDisplay(), values.getExtendedDisplay())">
    <i:block name="addon">
        <i:if test="showSelectionButton">
            <a class="btn btn-outline-secondary" id="@id-addon"><i class="fa-solid fa-bolt"></i></a>
        </i:if>
    </i:block>
    <i:block name="script">
        <i:if test="showSelectionButton">
            const helper = document.getElementById('___id-addon');
            helper.addEventListener('click', function () {
                new LookupTableInfo({
                    tableName: '___table',
                    labelFormat: '___values.getDisplay()',
                    codeCallback: function (code, name) {
                        @if (!readonly) {
                            if (!autocomplete.val().includes(code)) {
                                autocomplete.addToken({value: code, text: name});
                            } else {
                                autocomplete.select.removeTokenWithText(name);
                            }
                        }
                    }
                });
            });
        </i:if>
    </i:block>
    <i:for var="tuple"
           type="Tuple"
           items="values.resolveDisplayStrings()">
        <option value="@tuple.getFirst()" selected>
            @tuple.getSecond()
        </option>
    </i:for>
</t:multiSelect>

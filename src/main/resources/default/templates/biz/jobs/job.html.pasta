<i:arg type="sirius.biz.jobs.JobFactory" name="job"/>
<i:arg type="Map" name="context"/>
<i:arg type="sirius.biz.jobs.presets.JobPresets" name="presets"/>

<t:page title="@job.getLabel()">
    <i:block name="breadcrumbs">
        <li>
            <a href="/jobs">@i18n("JobFactory.plural")</a>
        </li>
        <li>
            <a href="/job/@job.getName()">@job.getLabel()</a>
        </li>
    </i:block>

    <i:block name="page-header">
        <t:pageHeader>
            <i:block name="title">@job.getLabel()</i:block>
            <i:block name="actions">
                <i:if test="!job.getJobInfos().isEmpty()">
                    <a class="btn btn-outline-link"
                       href="/jobs/infos/@job.getName()">
                        <span><i class="fa fa-book"></i></span>
                        @i18n("JobsController.showInfos")
                    </a>
                </i:if>
            </i:block>

            <t:iconInlineInfo icon="fa fa-info-circle">
                <i:if test="isFilled(job.getHTMLDescription())">
                    <i:raw>@job.getHTMLDescription()</i:raw>
                    <i:else>
                        @job.getDescription()
                    </i:else>
                </i:if>
            </t:iconInlineInfo>
        </t:pageHeader>
    </i:block>

    <t:editForm url="@apply('/job/%s', job.getName())">
        <div class="row">
            <div class="col-md-8">
                <div class="row">
                    <i:for type="sirius.biz.jobs.params.Parameter" var="param" items="job.getParameters()">
                        <i:dynamicInvoke template="@param.getTemplateName()" param="@param" context="@context"/>
                    </i:for>
                </div>
            </div>
            <div class="col-md-4">
                <i:if test="presets != null">
                    <div class="d-flex flex-column card card-border">
                        <div class="card-header">
                            @i18n("JobsController.presets")
                        </div>
                        <ul class="list-group list-group-flush">
                            <i:for type="sirius.biz.jobs.presets.JobPreset" var="preset"
                                   items="presets.fetchPresets(job)">
                                <li class="list-group-item d-flex flex-row justify-content-between align-items-baseline">
                                    <div><b>@preset.getJobConfigData().getLabel()</b></div>
                                    <div class="btn-group" role="group">
                                        <a class="btn btn-outline-link"
                                           href="javascript:loadPreset('@preset.getIdAsString()')">
                                            <i class="fa fa-check"></i>
                                            @i18n("JobsController.usePreset")
                                        </a>
                                        <a class="btn btn-outline-danger pull-right"
                                           href="javascript:deletePreset('@preset.getIdAsString()')">
                                            <i class="fa fa-trash"></i>
                                            @i18n("NLS.delete")
                                        </a>
                                    </div>
                                </li>
                            </i:for>
                        </ul>
                        <div class="d-flex flex-row justify-content-between card-body">
                            <a class="btn btn-outline-primary" href="javascript:showCreatePresetModal()">
                                <i class="fa fa-plus"></i>
                                @i18n("JobsController.createPreset")</a>
                        </div>
                    </div>
                </i:if>
            </div>
        </div>

        <input type="hidden" name="updateOnly" id="updateOnly"/>
        <input type="hidden" name="jobFactory" value="@job.getName()"/>

        <t:modal name="createPreset" titleKey="JobsController.createPreset">
            <fieldset>
                <t:textfield class="col-md-12" name="presetName" value="" labelKey="Model.name"
                             helpKey="JobsController.createPreset.help"/>
                <t:singleSelect class="col-md-12"
                                name="customPersistencePeriod"
                                labelKey="JobConfigData.customPersistencePeriod"
                                helpKey="JobConfigData.customPersistencePeriod.help"
                                optional="true">
                    <i:for var="period"
                           type="sirius.biz.process.PersistencePeriod"
                           items="@enumValues(sirius.biz.process.PersistencePeriod.class)">
                        <option value="@period.name()">@period.toString()</option>
                    </i:for>
                </t:singleSelect>
            </fieldset>
            <i:block name="footer">
                <a onclick="createPreset()" class="btn btn-primary"><i class="icon-ok"></i> @i18n("NLS.save")</a>
                <button type="button" class="btn btn-secondary" data-dismiss="modal">@i18n("NLS.cancel")</button>
            </i:block>
        </t:modal>
        <t:formBar btnLabelKey="JobFactory.execute"/>
    </t:editForm>

    <script type="text/javascript">
        sirius.ready(function () {
            function onChange() {
                const formData = sirius.getFormData(sirius.querySelector(".edit-form"));
                sirius.getJSON("/job/params/___job.getName()", formData).then(handleParameterUpdates);
            }

            function handleParameterUpdates(json) {
                for (const name in json.params) {
                    const _elem = sirius.querySelector('.param-' + name);
                    let param = json.params[name];
                    if (param.visible) {
                        _elem.removeAttribute("hidden");
                    } else {
                        _elem.setAttribute("hidden", true);
                    }
                    const _message = sirius.querySelector('.param-' + name + '-validation');
                    if (_message) {
                        _message.parentNode.removeChild(_message);
                    }
                    if (typeof param.validation !== 'undefined') {
                        // pretty hacky to split css classes, but it works, and unless we change the Message type there is no good way around it
                        const alertType = param.validation.class.split("-")[1];
                        const html = Mustache.render("<div class='mt-1 py-1 px-3 border-top param-{{name}}-validation alert-{{style}} border-{{style}}'><small>{{html}}</small></div>", Object.assign({
                            name: name,
                            style: alertType
                        }, param.validation));
                        _elem.insertAdjacentHTML("beforeend", html);
                    }
                }
            }

            document.querySelectorAll('.edit-form input[name]').forEach(function (input) {
                input.addEventListener("change", onChange);
            });
            document.querySelectorAll('.edit-form .token-autocomplete-container').forEach(function (input) {
                input.addEventListener("tokens-changed", onChange);
            });
            handleParameterUpdates({
                params: <i:raw>@job.computeRequiredParameterUpdates(null).toString()</i:raw>
            });
        });

        function showCreatePresetModal() {
            $('#createPreset').on('shown.bs.modal', function () {
                $('*[name="presetName"]').focus();
            }).modal('show');
        }

        function createPreset() {
            sirius.postJSON('/jobs/preset/create', sirius.getFormData(sirius.querySelector(".edit-form"))).then(function (response) {
                if (!response.success) {
                    addErrorMessage(response.message);
                } else {
                    sirius.querySelector('#updateOnly').value = true;
                    sirius.querySelector('.edit-form').submit();
                }
            });
        }

        function loadPreset(id) {
            sirius.getJSON('/jobs/preset/load', {preset: id}).then(function (response) {
                // Fill a temporary form and submit all parameters to the server
                // so that these are validated and rendered properly....
                var _form = sirius.querySelector('#loadForm');
                for (var i = 0; i < response.params.length; i++) {
                    const _field = document.createElement("input");
                    _field.type = "hidden";
                    _field.name = response.params[i].name;
                    _field.value = response.params[i].value;
                    _form.appendChild(_field);
                }
            }).then(function () {
                sirius.querySelector('#loadForm').submit();
            });
        }

        function deletePreset(id) {
            sirius.postJSON('/jobs/preset/delete', {
                preset: id,
                csrfToken: '@part(sirius.web.http.CSRFHelper.class).getCSRFToken()'
            }).then(function (response) {
                sirius.querySelector('#updateOnly').value = true;
                sirius.querySelector('.edit-form').submit();
            });
        }

    </script>
    <form action="@apply('/job/%s', job.getName())" method="post" id="loadForm">
        <input type="hidden" name="updateOnly" value="true"/>
        <input type="hidden" name="CSRFToken" value="@part(sirius.web.http.CSRFHelper.class).getCSRFToken()"/>
    </form>
</t:page>

<i:arg name="weakPasswordSettings" type="sirius.kernel.settings.Settings"/>
<i:arg name="finePasswordSettings" type="sirius.kernel.settings.Settings"/>
<i:arg name="securePasswordSettings" type="sirius.kernel.settings.Settings"/>

<script>
    /**@
     * Initializes the password fields and sets up the password strength validation.
     *
     * NOTE: The script is called from Wondergem and Tycho templates. Therefore, functions that are only available on
     * Tycho pages (e.g. 'sirius.ready') or Wondergem pages may not be used.
     *
     * It is expected that the following elements are present after the page load in the DOM:
     * - #newPasswordWrapper: The wrapper element for the new password input field.
     * - #confirmationWrapper: The wrapper element for the confirmation input field.
     * - #oldPasswordWrapper: The wrapper element for the old password input field (optional).
     * - #submitButton: The submit button for the form.
     * - #insufficientInfoBox: The info box for insufficient passwords.
     * - #weakInfoBox: The info box for weak passwords.
     * - #fineInfoBox: The info box for fine passwords.
     * - #secureInfoBox: The info box for secure passwords.
     */
    (function () {
        const STRENGTH_INSUFFICIENT = 'insufficient';
        const STRENGTH_WEAK = 'weak';
        const STRENGTH_FINE = 'fine';
        const STRENGTH_SECURE = 'secure';

        const settings = {
            weak: {
                minLength: ___weakPasswordSettings.getInt('minLength'),
                requireLettersAndDigits: ___weakPasswordSettings.get('requireLettersAndDigits').asBoolean(),
                requireUpperAndLowerCase: ___weakPasswordSettings.get('requireUpperAndLowerCase').asBoolean(),
                requireSpecialCharacters: ___weakPasswordSettings.get('requireSpecialCharacters').asBoolean()
            },
            fine: {
                minLength: ___finePasswordSettings.getInt('minLength'),
                requireLettersAndDigits: ___finePasswordSettings.get('requireLettersAndDigits').asBoolean(),
                requireUpperAndLowerCase: ___finePasswordSettings.get('requireUpperAndLowerCase').asBoolean(),
                requireSpecialCharacters: ___finePasswordSettings.get('requireSpecialCharacters').asBoolean()
            },
            secure: {
                minLength: ___securePasswordSettings.getInt('minLength'),
                requireLettersAndDigits: ___securePasswordSettings.get('requireLettersAndDigits').asBoolean(),
                requireUpperAndLowerCase: ___securePasswordSettings.get('requireUpperAndLowerCase').asBoolean(),
                requireSpecialCharacters: ___securePasswordSettings.get('requireSpecialCharacters').asBoolean()
            }
        }

        const _confirmationWrapper = document.querySelector('#confirmationWrapper');

        const _newPasswordInput = document.querySelector('#newPasswordWrapper input');
        const _confirmationInput = document.querySelector('#confirmationWrapper input');
        const _oldPasswordInput = document.querySelector('#oldPasswordWrapper input');

        const _submitButton = document.getElementById('submitButton');

        const _insufficientInfoBox = document.getElementById('insufficientInfoBox');
        const _weakInfoBox = document.getElementById('weakInfoBox');
        const _fineInfoBox = document.getElementById('fineInfoBox');
        const _secureInfoBox = document.getElementById('secureInfoBox');

        const updateActiveInfoBox = function (strength) {
            strength === STRENGTH_INSUFFICIENT
                ? _insufficientInfoBox.classList.add('alert-danger')
                : _insufficientInfoBox.classList.remove('alert-danger');

            strength === STRENGTH_WEAK
                ? _weakInfoBox.classList.add('alert-info')
                : _weakInfoBox.classList.remove('alert-info');

            strength === STRENGTH_FINE
                ? _fineInfoBox.classList.add('alert-info')
                : _fineInfoBox.classList.remove('alert-info');

            strength === STRENGTH_SECURE
                ? _secureInfoBox.classList.add('alert-success')
                : _secureInfoBox.classList.remove('alert-success');
        }

        const arePasswordRequirementsMet = function (settings) {
            const password = _newPasswordInput.value;

            if (password.length < settings.minLength) {
                return false;
            }

            if (settings.requireLettersAndDigits && !/\d/.test(password) && !/[a-zA-Z]/.test(password)) {
                return false;
            }

            if (settings.requireUpperAndLowerCase && !/[a-z]/.test(password) && !/[A-Z]/.test(password)) {
                return false;
            }

            if (settings.requireSpecialCharacters && !/[^\p{L}\p{N}]/u.test(password)) {
                return false;
            }

            return true;
        }

        const determinePasswordStrength = function () {
            if (arePasswordRequirementsMet(settings.secure)) {
                return STRENGTH_SECURE;
            }
            if (arePasswordRequirementsMet(settings.fine)) {
                return STRENGTH_FINE;
            }
            if (arePasswordRequirementsMet(settings.weak)) {
                return STRENGTH_WEAK;
            }
            return STRENGTH_INSUFFICIENT;
        }

        const handleChange = function () {
            const password = _newPasswordInput.value;
            if (password.length === 0) {
                /**@ Don't highlight any info box **/
                updateActiveInfoBox('');
                return;
            }

            const strength = determinePasswordStrength();
            const confirmationMatches = _newPasswordInput.value === _confirmationInput.value;
            const oldPasswordOk = !_oldPasswordInput || _oldPasswordInput.value.length > 0;

            updateActiveInfoBox(strength);

            if (strength !== STRENGTH_INSUFFICIENT
                &&_confirmationInput.value.length > 0
                && !confirmationMatches && _confirmationInput.value.length > 0) {
                _confirmationWrapper.classList.add('has-error');
            } else {
                _confirmationWrapper.classList.remove('has-error');
            }

            if (strength !== STRENGTH_INSUFFICIENT && confirmationMatches && oldPasswordOk) {
                _submitButton.removeAttribute('disabled');
            } else {
                _submitButton.setAttribute('disabled', 'disabled');
            }
        }

        _newPasswordInput.addEventListener('input', handleChange);
        _confirmationInput.addEventListener('input', handleChange);
        if (_oldPasswordInput) {
            _oldPasswordInput.addEventListener('input', handleChange);
        }

        handleChange();
    }());
</script>

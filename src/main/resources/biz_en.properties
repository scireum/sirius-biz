AddressData.badZip = Error in '${name}': The zip code '${zip}' is invalid for the selected country.
AddressData.city = City
AddressData.fullAddressRequired = Error in '${name}': Please fill in all fields.
AddressData.invalidCountry = Invalid country in '${name}': ${error}
AddressData.partialAddressRejected = Error in '${name}': Please enter a full address.
AddressData.street = Street
AddressData.zip = Zip code
AmountRangeCheck.errorMsg = The value (${value}) is invalid. The value must be ${operator} ${limit}.
AmountRangeCheck.minMaxRemark = The value must be ${minOperator} ${min} and ${maxOperator} ${max}.
AmountRangeCheck.remark = The value must be ${operator} ${limit}.
AmountScaleCheck.errorMsg.notNumeric = The value (${value}) is invalid because it is not a number.
AmountScaleCheck.errorMsg.precisionExceeded = The value (${value}) is invalid because it consists of more than ${precision} digits.
AmountScaleCheck.errorMsg.scaleExceeded = The value (${value}) is invalid because it consists of more than ${scale} decimal places.
AmountScaleCheck.remark = The value must not exceed ${precision} digits and ${scale} decimal places.
ArchiveFileImportJob.error.optionalFileMissing = The optional file '${filename}' does not exist inside the provided archive.
ArchiveFileImportJob.error.requiredFileMissing = The file '${filename}' was not found inside the provided archive.
AuditLog.apiTokenLogin = Login via API token.
AuditLog.externalLoginRequired = The login was aborted as an external login is required.
AuditLog.lockedOrNonexitentUserTriedLogin = A locked or non existing user attempted a login.
AuditLog.loginRejected = Login rejected: Invalid password or API token.
AuditLog.passwordChange = Password changed by user.
AuditLog.passwordChangeFailed = An error occured while the user tried to change the password.
AuditLog.passwordGenerated = A new password was generated by the user.
AuditLog.passwordLogin = Login via password.
AuditLog.passwordReHashed = The password has been re-hashed using a stronger cryptographic method.
AuditLog.resetPassword = The password has been reset by the user.
AuditLog.resetPasswordRejected = The password wasn't reset as the user account is locked.
AuditLog.selectedTenant = User has transferred clients.
AuditLog.selectedUser = User has taken over another user.
AuditLog.switchedToMainTenant = User has switched to the main client.
AuditLog.switchedToMainUser = User has switched back to the main account.
AuditLogEntry.causedBy = Causer
AuditLogEntry.ip = IP
AuditLogEntry.plural = Security log
AuditLogEntry.tenant = Company
AuditLogEntry.timestamp = Time
AuditLogEntry.user = User
BaseFileParameter.invalidFileExtension = The file '${name}' contains none of the valid file extensions: ${extensions}
BasePageHelper.sort = Sort
BasicBlobStorageSpace.cannotMoveAcrossSpaces = Moving across file system boundaries is not possible. Please use the 'Move' job.
BasicBlobStorageSpace.cannotMoveDuplicateName = Moving is not possible because a directory or file with that name already exists.
BasicBlobStorageSpace.cannotMoveIntoLoop = It is not possible to move them, as this would create a cyclic dependency.
BasicBlobStorageSpace.cannotRenameDuplicateName = The name is already used by another directory or file.
BasicBlobStorageSpace.cannotRenameRoot = The root directory cannot be renamed.
BatchProcessJobFactory.jobLink = Job
BatchProcessJobFactory.scheduled = The job has been added to the execution queue.
BatchProcessTaskExecutor.completedButFailed = The execution was terminated, errors occurred.
BatchProcessTaskExecutor.completedSuccessfully = The execution was successfully completed.
BatchProcessTaskExecutor.started = The execution of the job has been started.
BizController.changesSaved = The changes have been saved
BizController.deleteCompleted = The delete process has been completed.
BizController.deleteProcess = Delete process
BizController.deleteProcessTitle = Deletion of '${entity}'
BizController.deletingInBackground = The entity contains some linked entities and is therefore deleted in the background.
BizController.illegalArgument = Incorrect input. Please correct the marked fields.
BizController.invalidReference = A relationship in '${owner}' should point to referenced object '${target}', but points to '${actual}' instead.
BizController.mustNotBeNew = An existing data object of type '${type}' is required.
BizController.objectDeleted = The object was deleted
BizController.startDelete = Starting the deletion of: ${entity}.
BizController.unknownObject = Unknown data object: '${id}' of type '${type}'.
BizInterceptor.missingPermission = You need the permission '${permission}' to perform the action.
BlobStorageSpace.work.description = Contains work files for processing by the system or results from exports and checks.
BlockedIPsReportJobFactory.description = Returns a list of currently blocked IP addresses.
BlockedIPsReportJobFactory.label = Blocked IP addresses
BucketInfo.numberOfObjects = Number of files
CheckForChildrenTask.hasChildren = The child tenants of this tenant need to be deleted first!
CodeList = Code list
CodeList.noPipeAllowed = The field "Code" must not contain the character '|'.
CodeList.plural = Code lists
CodeListController.codeMustBeFilled = The field "Code" must not be empty.
CodeListData.autofill = Automatic filling
CodeListData.autofill.help = Specifies whether unknown entries should be created automatically.
CodeListEntry.plural = Entries
CodeListEntryData.additionalValue = Additional value
CodeListEntryData.value = Value
CodeLists.missingEntry = The required entry '${code}' in the code list '${codeList}' does not exist.
CodeLists.missingList = The code list '${codeList}' does not exist.
CodeLists.noCurrentTenant = No client could be found for the specified code list
ComparisonPeriod.PREVIOUS_DAY = Previous day
ComparisonPeriod.PREVIOUS_MONTH = Previous month
ComparisonPeriod.PREVIOUS_WEEK = Previous week
ComparisonPeriod.PREVIOUS_YEAR = Previous year
ContactData.email = E-Mail
ContactData.fax = FAX
ContactData.invalidPhone = Error in field '${field}': '${value}' is not a valid phone number.
ContactData.mobile = Mobile phone
ContactData.phone = Phone
Country._all = Worldwide
Country.ae = United Arab Emirates
Country.ar = Argentina
Country.at = Austria
Country.au = Australia
Country.be = Belgium
Country.br = Brazil
Country.bu = Bulgaria
Country.by = Belarus
Country.ca = Canada
Country.ch = Switzerland
Country.cl = Chile
Country.cn = China
Country.cz = Czechia
Country.de = Germany
Country.dk = Denmark
Country.ee = Estonia
Country.es = Spain
Country.fi = Finland
Country.fr = France
Country.gb = United Kingdom
Country.gr = Greece
Country.hr = Croatia
Country.hu = Hungary
Country.id = Indonesia
Country.ie = Ireland
Country.il = Israel
Country.in = India
Country.it = Italy
Country.jp = Japan
Country.kr = South Korea
Country.li = Liechtenstein
Country.lt = Lithuania
Country.lu = Luxembourg
Country.lv = Latvia
Country.mt = Malta
Country.mx = Mexico
Country.my = Malaysia
Country.nl = Netherlands
Country.no = Norway
Country.none = None
Country.nz = New Zealand
Country.pe = Peru
Country.pl = Poland
Country.pt = Portugal
Country.ro = Romania
Country.row = Rest of the world
Country.rs = Serbia
Country.ru = Russia
Country.sa = Saudi Arabia
Country.sg = Singapore
Country.se = Sweden
Country.si = Slovenia
Country.sk = Slovakia
Country.th = Thailand
Country.tr = Turkey
Country.ua = Ukraine
Country.us = USA
Country.vn = Vietnam
Country.za = South Africa
DatabaseController.execute = Execute
DatabaseController.help = <p>The following changes to the database schema are recommended so that the application can be executed.</p><p>Please note that manually created tables may also be proposed for deletion. Here you should check whether these tables should really be deleted.</p><p>In any case, it is recommended to perform a database backup before making changes.</p><p>Some changes, such as deleting a column, may only be executed after dependent changes (e.g. deleting FOREIGN KEYs) have been made.
DatabaseController.realm = Database
DatabaseController.reason = Reason
DatabaseController.schema = Database schema
DatabaseController.sql = SQL
DatabaseController.unknownChange = Unknown change
DateRangeParameter.label = Period
DateTimeFormatCheck.errorMsg = The value '${value}' does not match the date format '${format}'.
DateTimeFormatCheck.remark = Date format: ${format}
DeleteProcessesTask.deleteCount = No processes present | A process is deleted | ${count} processes are deleted.
DeleteTenantJobFactory.aborting = An error occurred while deleting, the process is aborted.
DeleteTenantJobFactory.deletingMainEntity = Delete the data object of the client.
DeleteTenantJobFactory.description = Deletes a selected client and all associated data.
DeleteTenantJobFactory.label = Delete client
DeleteTenantJobFactory.simulateInfo = The deletion is only simulated.
DeleteTenantJobFactory.takeAction = Really delete?
DeleteTenantJobFactory.takeAction.help = If 'No' is selected, deletion is only simulated.
DeleteTenantJobFactory.title = Delete client "${name}"
DeleteTenantJobFactory.title.simulate = Delete client "${name}" (SIMULATED)
DeleteTenantTask.beforeExecution.many = Deleting ${count} ${name}.
DeleteTenantTask.beforeExecution.no = No ${name} to delete.
DeleteTenantTask.beforeExecution.one = Deleting 1 ${name}.
DictionaryBasedImportJobFactory.ignoreEmpty = Ignore empty values
DictionaryBasedImportJobFactory.ignoreEmpty.help = Specifies that missing values are skipped instead of emptying the corresponding target field.
DirectoryParameter.invalidPath = The directory '${path}' was not found.
DisasterController.date = Date
DisasterController.lock = Locking the user interface
DisasterController.locked = Lockout activated
DisasterController.lockMessageHelp = Specify the message that is displayed when the user interface is locked. Note that the lock is only performed if both a message is specified and the <b>lock is activated</b>. The date and time can be used to manually set the point in time when the lock takes effect. If the date or the time is empty, the lock takes effect immediately.
DisasterController.maintenanceMessage = Notification of maintenance work
DisasterController.message = Message
DisasterController.previewMessageHelp = Enter the message for announcing maintenance work here. The date and time can be used to manually set the time from when the message is displayed. If the date or time is empty, the message is displayed immediately.
DisasterController.time = Time
DisasterController.title = Maintenance mode
EntityExport.fullExport = Export all applicable records, because either no template was selected or the template does not contain any additional data...
EntityExportJob.exportWithDefaultMapping = The export contains the standard columns because no template was selected...
EntityExportJob.learningMapping = Determine the columns from the contents of row ${row}...
EntityExportJob.startingTemplateBasedExport = Begin enrichment of the given data...
EntityExportJobFactory.templateFile = Template
EntityExportJobFactory.templateFile.help = Select a CSV- or MS Excel file which specifies a different column order. This file can also contain additional lines, which are then completed by the system.
EntityExportJobFactory.templateModes = If a template exists, the column assignments are determined automatically using the first line and the field names (or alternative descriptions). Upper/lower case and spaces are ignored. If the template contains further rows, these are (if possible) enriched instead of outputting all data records.
EntityImportJob.cannotHandleEntity = The data object '${entity}' cannot be imported: ${message}
EntityImportJob.entityCreated = New creation
EntityImportJob.entityUpdated = Update
EntityImportJob.rowIgnored = line skipped
EntityImportJobFactory.automaticMappings = The column assignments are determined automatically using the first line and the field names (or alternative descriptions). Upper/lower case and spaces are ignored.
EntityImportJobFactory.importMode = Mode
EntityImportJobFactory.importMode.help = Specifies which lines of the file are taken into account. All other lines are skipped.
EntityParameter.mustExist = An existing data object is required.
ExportFileType.CSV = CSV file
ExportFileType.XLS = MS Excel '97 (.xls)
ExportFileType.XLSX = MS Excel (.xlsx)
ExportLogsAsFileTaskExecutor.completed = The export was successfully completed.
ExportLogsAsFileTaskExecutor.reportTargetFile = The output '${outputLabel}' is exported as file '${filename}' and attached to the process.
FieldDefinition.aliasRemark = Alternative names: ${aliases}
FieldDefinition.name = Name
FieldDefinition.remarks = Remarks
FieldDefinition.type = Type
FieldDefinition.typeBoolean = Yes/No
FieldDefinition.typeDate = Date
FieldDefinition.typeDateTime = Date + time
FieldDefinition.typeNumber.length = Number (${precision},${scale})
FieldDefinition.typeNumber.plain = Number
FieldDefinition.typeOther = Other
FieldDefinition.typeString.length = Text (${length})
FieldDefinition.typeString.plain = Text
FieldDefinition.typeStringList = List
FieldDefinition.typeTime = Time
FileExportJobFactory.destination = Objective
FileExportJobFactory.destination.help = Select a target directory or a target file here. If you leave the field empty, the file will be attached to the export process.
FileExportJobs.tooManyFiles = No new file could be created because all file names (${firstFile} to ${lastFile}) already exist.
VirtualFileExtractionJob.description = Extracts the contents of an archive from the file storage into the given target directory.
VirtualFileExtractionJob.label = Extract file
VirtualFileExtractionJob.sourceParameter = Archive file
VirtualFileExtractionJob.sourceParameter.help = Archive to be extracted
VirtualFileExtractionJob.destinationParameter = Target directory
VirtualFileExtractionJob.destinationParameter.help = Directory to extract the archive file to. Keep empty if the file should be extracted in its directory.
VirtualFileExtractionJob.overwriteExistingFilesParameter = Overwrite existing files?
VirtualFileExtractionJob.overwriteExistingFilesParameter.help = Defines if already existing target files should be overwritten. Target files won't be overwritten by default.
VirtualFileExtractionJob.skippingOverwrite = Target file '${targetPath}' already exists and therefore will not be overwritten.
VirtualFileExtractionJob.extractingFile = Extracting target file '${filePath}' (${fileSize}) and uploading to '${targetPath}'.
VirtualFileExtractionJob.overwritingFile = Extracting target file '${filePath}' (${fileSize}) and uploading to '${targetPath}' replacing the existing file.
VirtualFileExtractionJob.progress = Status: ${status}, files processed: ${filesProcessed}, data processed: ${dataProcessed}, total size: ${sizeTotal}.
FileImportJob.fileNotSupported = The file is not supported.
FileImportJob.importingZipFile = The file is unpacked for import.
FileImportJob.importingZippedFile = The unzipped file '${filename}' is imported.
FileImportJob.noZippedFileFound = The archive does not contain a supported file.
FileImportJobFactory.file = File
FileOrDirectoryParameter.invalidPath = ${path}' is neither a file nor an existing target directory.
FileParameter.invalidPath = The file '${path}' was not found.
ImportDictionary.fieldError = Error in field ${field} (${label}): ${message}
ImportDictionary.fields = Fields
ImportDictionary.mappingFunction = Column assignments
ImportDictionary.missingColumn = The ${index} ('${expected}') column is missing.
ImportDictionary.severeFieldError = Exception error while checking field ${field} (${label}): ${message}
ImportDictionary.superfluousColumn = The column ${index} ('${column}') is unexpected.
ImportDictionary.tooManyColumns = The record contains too many columns (${count}). ${columns} columns were expected. Please verify the used field delimiter (usually semicolon) and field enclosure (usually double quotes).
ImportDictionary.unknownColumn = The column ${index} ('${column}') could not be assigned.
ImportDictionary.wrongColumn = In the column ${index} '${expected}' was expected, but '${column}' was found.
ImportJob.invalidReference = A relationship in '${owner}' should point to referenced object '${target}', but points to '${actual}' instead.
ImportMode.CHECK_ONLY = Check only, do not save
ImportMode.NEW_AND_UPDATES = Process all lines
ImportMode.NEW_ONLY = Only create new data records
ImportMode.UPDATE_ONLY = Update existing records only
IncidentController.totalIncidents = Number of entries
InteractiveJobFactory.additionalMetrics = Additional metrics
InternationalAddressData.country = Country
Isenguard.limitReached = A rate limit was reached by the user.
Isenguard.rateLimitInfo = Rate limits
JobCategory.check = Checks
JobCategory.export = Exports
JobCategory.import = Imports
JobCategory.misc = Other
JobCategory.report = Reports
JobConfigData.job = Job
JobConfigData.label = Designation
JobConfigData.label.help = Enter a name or short description for the scheduled task here.
JobConfigData.unknownJob = Unknown job: ${job}
JobDescription.title = Designation
JobFactory.execute = Execute
JobFactory.plural = Jobs
JobPreset.plural = Job templates
Jobs.matchingJobs = Matching jobs
JobSchedulerLoop.jobLink = Planned execution
JobSchedulerLoop.scheduledExecutionInfo = The job was started by the scheduled execution of '${entry}'...
JobsController.createPreset = Create template
JobsController.createPreset.help = Enter the name of the template here. Use the name of an existing template to update it.
JobsController.execute = Execute
JobsController.job = Job
JobsController.jobs = Jobs
JobsController.logs = Protocols
JobsController.presets = Templates
JobsController.showInfos = Documentation
JobsController.usePreset = Apply
JobsRoot.description = Contains a subdirectory for each job that can process a file. This again contains one subdirectory for each job template, which defines the remaining parameters. If a file is uploaded here, the corresponding job is started with it.
JournalEntry.plural = Change log
JournalEntry.subsystem = Subsystem
JournalEntry.targetId = Id
JournalEntry.targetName = Object
JournalEntry.targetType = Type
JournalEntry.tod = Date
JournalEntry.userId = User ID
JournalEntry.username = User
Language.af = Afrikaans
Language.ar = Arabic
Language.be = Belarusian
Language.bg = Bulgarian
Language.cn = Chinese
Language.cs = Czech
Language.da = Danish
Language.de = German
Language.el = Greek
Language.en = English
Language.es = Spanish
Language.et = Estonian
Language.fa = Farsi
Language.fi = Finnish
Language.fr = French
Language.ga = Irish
Language.gr = Greek
Language.he = Hebrew
Language.hi = Hindi
Language.hr = Croatian
Language.hu = Hungarian
Language.id = Indonesian
Language.it = Italian
Language.ja = Japanese
Language.ko = Korean
Language.lb = Luxembourgish
Language.lt = Lithuanian
Language.lv = Latvian
Language.ms = Malay
Language.mt = Maltese
Language.nl = Dutch
Language.no = Norwegian
Language.pl = Polish
Language.pt = Portuguese
Language.ro = Romanian
Language.rs = Serbian
Language.ru = Russian
Language.se = Swedish
Language.si = Slovenian
Language.sk = Slovak
Language.sl = Slovenian
Language.ta = Tamil
Language.th = Thai
Language.tr = Turkish
Language.ua = Ukrainian
Language.vi = Vietnamese
Language.vls = Flemish
Language.zh = Chinese
LengthCheck.errorMsg = The value must not be longer than ${maxLength} characters. (length: ${length}).
LengthCheck.remark = Maximum field length: ${maxLength}
LineBasedAliases.column = Column ${column}
LineBasedExportJobFactory.fileType = File type
LineBasedExportJobFactory.fileType.help = Select the type of the file to be exported here. If you have already selected a target file, the format is determined by its file extension.
LineBasedImportExportJobFactory.outputFile = Output file
LineBasedJob.erroneousRow = Error
LineBasedJob.errorInRow = Error in line ${row}: ${message}
LineBasedJob.failureInRow = Error in row ${row}: ${errorMessage} (${errorClass})
LineBasedJob.row = Line
LocaleData.lang = Language
LoggedMessage.category = Logger
LoggedMessage.level = Level
LoggedMessage.message = Message
LoggedMessage.node = Machine
LoggedMessage.plural = System log
LoggedMessage.tod = Date
LoggedMessage.user = User
LoginData.accountIsLocked = The user is locked.
LoginData.accountLocked = Locked
LoginData.accountLocked.help = Determines if this user account is locked. A locked user cannot access the system in any way.
LoginData.apiToken = API code
LoginData.changeFingerprint = Log out on all devices
LoginData.generatedPassword = Generated Password
LoginData.lastExternalLogin = Last login (external)
LoginData.lastLogin = Last login
LoginData.lastPasswordChange = Last password change
LoginData.lock = Lock
LoginData.numberOfLogins = No. Logins
LoginData.password = Password
LoginData.password.generate = Generate password
LoginData.password.generateAndSend = Generate and send password
LoginData.password.hiddenGenerated = Generated password hidden
LoginData.password.hiddenGeneratedShort = hidden
LoginData.password.set = Set password
LoginData.passwordHash = Password Hash
LoginData.salt = salt
LoginData.ucasePasswordHash = PasswordHashLittle
LoginData.unlock = Unlock
LoginData.username = User name
mail-password.loginHere = Sign in here
mail-password.password = Password
mail-password.username = Username or email
mail-password.yourCredentails = Your login data
mail.hello = Hello
MailLoggedMessage.html = HTML
MailLoggedMessage.mailExtension = Template
MailLoggedMessage.messageId = Message ID
MailLoggedMessage.node = Machine
MailLoggedMessage.plural = Mails
MailLoggedMessage.receiver = Recipient
MailLoggedMessage.receiverName = Recipient name
MailLoggedMessage.sender = Sender
MailLoggedMessage.senderName = Sender name
MailLoggedMessage.success = Successful
MailLoggedMessage.text = Text
MailLoggedMessage.tod = Date
MailProtocol.html = HTML
MailProtocol.messageId = Message ID
MailProtocol.node = Machine
MailProtocol.plural = E-mails
MailProtocol.receiver = Recipient
MailProtocol.receiverName = Recipient name
MailProtocol.sender = Sender
MailProtocol.senderName = Sender name
MailProtocol.success = Successful
MailProtocol.text = Text
MailProtocol.tod = Date
MailProtocol.type = Type
Menu.settings = Manage
Model.address = Address
Model.code = Code
Model.codeList = Code list
Model.codeListEntry = Entry
Model.config = Configuration
Model.confirmation = Confirmation
Model.create = Create new
Model.description = Description
Model.details = Details
Model.email = Email
Model.id = ID
Model.incident = Error
Model.invalidEmail = Invalid email address.
Model.lang = Language
Model.links = Links
Model.login = Login
Model.login.emailRequired = Please provide an email address
Model.login.forgotPassword = Forgot password
Model.login.forgotPassword.help = Please enter your email address here to reset your password. This will be sent to you by e-mail.
Model.login.keepLogin = Stay logged in
Model.login.login = Login
Model.login.password = Password
Model.login.passwordResetted = Your password has been reset. You have received an email with the new password.
Model.login.passwortReset = Reset Password
Model.login.resetPassword = Reset Password
Model.login.user = User name
Model.name = Name
Model.newPassword = New Password
Model.oldPassword = Old password
Model.overview = Overview
Model.password = Password
Model.password.confirmationMismatch = The entered password does not match the confirmation.
Model.password.hilarious = Insufficient
Model.password.hilarious.description = Passwords shorter than ${minLength} characters
Model.password.minLengthError = The entered password is too short.
Model.password.moderate = Moderately Safe
Model.password.moderate.description = Passwords consisting of uppercase / lowercase letters or numbers
Model.password.recommended = Recommended
Model.password.set = Change Password
Model.password.stateOfTheArt = Secure
Model.password.stateOfTheArt.description = Passwords consisting of letters and special characters
Model.password.unsafe = Insecure
Model.password.unsafe.description = Passwords shorter than ${saneLength} characters or passwords only consisting of lowercase letters, uppercase letters or numbers.
Model.priority = Priority
Model.saml = SAML
Model.security = Security
Model.tenant = Tenant
Model.userAccount = User
Model.virtualObject = File
MongoCodeListExportJobFactory.description = Exports a code list as CSV or Excel file.
MongoCodeListExportJobFactory.label = Export code list
MongoCodeListImportJobFactory.description = Imports a code list from a CSV or Excel file.
MongoCodeListImportJobFactory.label = Import code list
MongoUserAccountExportJobFactory.description = Exports users to a CSV or Excel file.
MongoUserAccountExportJobFactory.label = Exporting users
MongoUserAccountImportJobFactory.description = Imports user accounts using a CSV or Excel file.
MongoUserAccountImportJobFactory.label = Import user accounts
MoveIndexAliasJobFactory.descriptorParameter = Scheme
MoveIndexAliasJobFactory.destinationParameter = Target Index
PackageData.packageString = Service package
PackageData.upgrades = Upgrades
Packages.packages = Packages
Packages.permission.active = Active
Packages.permission.default = Default
Packages.permission.defaultValue = Default value
Packages.permission.denied = Denied
Packages.permission.description = Description
Packages.permission.name = Name
Packages.upgrades = Upgrades
Parameter.invalidValue = Error in parameter ${name}: ${message}
Parameter.required = The parameter ${name} must be filled.
Permission.administrator = Administrator
Permission.administrator.description = Allows the user to change system settings.
Permission.feature-provide-jobs = Provides jobs
Permission.file-manager = Manage files
Permission.file-manager.description = Enables you to maintain files in the file repository.
Permission.jobs-execution = Execute jobs
Permission.jobs-execution.description = Allows the user to execute jobs.
Permission.jobs-manager = Manage Jobs
Permission.jobs-manager.description = Allows the user to execute jobs, view all execution logs and schedule automatic executions.
Permission.user-administrator = Manage users
Permission.user-administrator.description = Allows users to create or edit.
PermissionData.permissions = Permissions
PersistencePeriod.FOURTEEN_DAYS = 14 days
PersistencePeriod.ONE_DAY = 1 day
PersistencePeriod.ONE_MONTH = 1 month
PersistencePeriod.ONE_YEAR = 1 year
PersistencePeriod.SIX_YEARS = 6 years
PersistencePeriod.TEN_YEARS = 10 years
PersistencePeriod.THREE_DAYS = 3 days
PersistencePeriod.THREE_MONTHS = 3 months
PersistencePeriod.THREE_YEARS = 3 years
PersonData.birthday = Birthday
PersonData.firstname = First name
PersonData.invalidSalutation = Invalid value in the salutation field: ${error}
PersonData.lastname = Last name
PersonData.offline = offline
PersonData.salutation = Salutation
PersonData.title = Title
Process = Process
Process.completed = Completed
Process.counters = Performance
Process.expires = Planned deletion time
Process.externalLinks = External links
Process.files = Files
Process.lastInteraction = Last interaction
Process.lastLogs = Latest messages
Process.logs = Messages
Process.numLogs = Messages
Process.persistencePeriod = Retention period
Process.plural = Processes
Process.processType = Type
Process.runtime = Runtime
Process.scheduled = Scheduled
Process.started = Started
Process.state = Status
Process.stateMessage = Last status
Process.tenantName = Tenant
Process.title = Name
Process.userName = User
ProcessController.disableDebugging = Disable debugging
ProcessController.enableDebugging = Enable debugging
ProcessController.export = Export
ProcessController.exportLogsReason = Exporting messages as a file
ProcessController.exportOutputReason = Export '${output}' to file
ProcessController.exportStarted = The export has been started, the result file is attached to this process.
ProcessController.logUpdated = The status has been updated.
ProcessController.reference = Reference
ProcessController.sortAsc = Oldest first
ProcessController.sortDesc = Newest first
ProcessController.unknownAction = Unknown action: ${action}
ProcessController.unknownOutput = Unknown output: ${output}
Processes.restarted = The process was restarted: ${reason}
ProcessLog.actionMarkIgnored = Ignore
ProcessLog.actionMarkOpen = Reopen
ProcessLog.actionMarkResolved = Resolve
ProcessLog.format = Message from process ${process} (${timestamp})
ProcessLog.message = Message
ProcessLog.messageType = Message type
ProcessLog.node = Machine
ProcessLog.plural = Messages
ProcessLog.state = Status
ProcessLog.systemMessage = System message
ProcessLog.timestamp = Time
ProcessLog.type = Type
ProcessLogState.IGNORED = Ignored
ProcessLogState.OPEN = Open
ProcessLogState.RESOLVED = Resolved
ProcessLogType.ERROR = Error
ProcessLogType.INFO = Information
ProcessLogType.SUCCESS = Successful
ProcessLogType.WARNING = Warning
ProcessState.CANCELED = Canceled
ProcessState.RUNNING = Active
ProcessState.STANDBY = Standby
ProcessState.TERMINATED = Completed
ProfileController.invalidOldPassword = The old password is incorrect.
ProfileController.myProfile = My profile
ProfileController.userProfile = User profile
RateLimitEventsReportJobFactory.description = Lists when functions or calls were blocked because a rate limiting became active.
RateLimitEventsReportJobFactory.description.filtered = Lists for the selected data object when functions or calls were blocked because a rate limiting was active.
RateLimitEventsReportJobFactory.label = Rate Limit Events
RateLimitEventsReportJobFactory.label.filtered = Rate Limit Events (filtered)
RateLimitReportJobFactory.description = Shows the currently set rate limits for you.
RateLimitReportJobFactory.label = Rate Limit Status
ReindexJobFactory.descriptorParameter = Scheme
RequiredCheck.errorMsg = The field is a mandatory field and must not be empty.
RequiredCheck.remark = This field is a mandatory field.
SAMLController.loginViaSAML = Registration via SAML
SchedulderController.parameters = Parameters
SchedulderController.planning = Planning
SchedulerData.dayOfMonth = Day
SchedulerData.dayOfMonth.help = Specify the day on which the job is to be executed. Possible values are 1-31, use * for any day. Use /N to select days divisible by N. Separate multiple values with a comma.
SchedulerData.dayOfWeek = Weekday
SchedulerData.dayOfWeek.help = Enter the day of the week on which the job is to be executed. Possible values are 1-7, where 1 stands for Monday. Use * for any day of the week. Use /N to select weekdays divisible by N. Separate multiple values with a comma.
SchedulerData.enabled = Activated
SchedulerData.enabled.false = Inactive
SchedulerData.enabled.help = Select here whether automatic execution is currently active or paused.
SchedulerData.enabled.true = Active
SchedulerData.hourOfDay = hour
SchedulerData.hourOfDay.help = Enter the hours in which the job should be executed. Possible values are 0-23. Use * for any hours. Use /N to select hours that are divisible by N. Separate multiple values with a comma.
SchedulerData.minute = Minute
SchedulerData.minute.help = Enter the minute in which the job should be executed. Possible values are 0-59. Use * for any minutes. Use /N to select minutes divisible by N. Separate multiple values with a comma.
SchedulerData.month = month
SchedulerData.month.help = Enter the month in which the job is to be executed. Possible values are 1-12, where 1 stands for January. Use * for any month. Use /N to select months divisible by N. Separate multiple values with a comma.
SchedulerData.runs = Remaining remarks
SchedulerData.runs.help = Specify here whether the system should stop executing this job after a certain number of executions. Leave the field blank for an unlimited number of executions.
SchedulerData.userId = User
SchedulerData.userId.help = Select here as which user the job should be started. Make sure that the user is not locked and has all the required authorizations.
SchedulerData.year = Year
SchedulerData.year.help = Enter the year in which the job should be executed. Use * for any year. Separate multiple values with a comma.
SchedulerEntry.continue = Continue
SchedulerEntry.create = New planned execution
SchedulerEntry.dayOfMonth = Day
SchedulerEntry.dayOfWeek = Weekday
SchedulerEntry.enabled = Activated
SchedulerEntry.hourOfDay = hour
SchedulerEntry.invalidPattern = The input '${pattern}' is invalid, please refer to the field notes.
SchedulerEntry.invalidPatternInField = Invalid value in field ${field}: ${msg}
SchedulerEntry.lastExecution = Last execution
SchedulerEntry.minute = Minute
SchedulerEntry.month = month
SchedulerEntry.numberOfExecutions = Number of versions
SchedulerEntry.plural = Planned designs
SchedulerEntry.runs = Remaining remarks
SchedulerEntry.year = Year
ScopeDefaultConfigController.showDefaultConfig = default configuration
SQLCodeListExportJobFactory.description = Exports a code list as CSV or Excel file.
SQLCodeListExportJobFactory.label = Export code list
SQLCodeListImportJobFactory.description = Imports a code list from a CSV or Excel file.
SQLCodeListImportJobFactory.label = Import code list
SQLUserAccountExportJobFactory.description = Exports users to a CSV or Excel file.
SQLUserAccountExportJobFactory.label = Exporting users
SQLUserAccountImportJobFactory.description = Imports user accounts using a CSV or Excel file.
SQLUserAccountImportJobFactory.label = Import user accounts
Storage.uploadFailed = An error occurred during upload: ${errorMessage} (${errorClass})
StorageController.buckets = File storage
StorageController.cannotAccessBucket = You may not access the contents of ${bucket} because you have not the required permissions or because it does not exist.
StorageController.objects = Files
StorageController.uploadFile = Upload file
StoredIncident = Error
StoredIncident.category = Category
StoredIncident.firstOccurrence = For the first time
StoredIncident.lastOccurrence = Last time
StoredIncident.location = Error source
StoredIncident.mdc = Details
StoredIncident.mdc.name = Name
StoredIncident.mdc.value = Value
StoredIncident.node = Machine
StoredIncident.numberOfOccurrences = Quantity
StoredIncident.plural = Error log
StoredIncident.stack = Stacktrace
StoredIncident.user = User
StoredObject.cancelUpload = Cancel
StoredObject.errEmpty = File is empty
StoredObject.errInvalidExtension = Invalid file type
StoredObject.errTooLarge = file too large
StoredObject.errTooSmall = file too small
StoredObject.resetBtn = Reset
StoredObject.specifyURL = Specify URL
StoredObject.uploadArea = Drag files here to upload them...
StoredObject.uploadBtn = Select file...
StoredObject.uploadFailed = Upload failed
StoredObject.URL = URL
Tenant.administration = Administration
Tenant.parent = Parent tenant
Tenant.parent.help = If a parent tenant is specified, certain data objects are obtained from this tenant and administration is possible.
Tenant.permissions = Permissions
Tenant.plural = Tenants
Tenant.saml = Authentication via SAML 2.0
Tenant.select = Switch tenant
Tenant.selectMain = Main tenant
Tenant.suffixDays = Days
TenantAware.invalidTenant = Error in field '${field}': The object must belong to the same tenant.
TenantController.cannotBecomeTenant = You cannot manage the selected tenant.
TenantController.cannotDeleteSelf = You cannot delete your own tenant.
TenantController.select = Take over
TenantData.accountNumber = Customer number
TenantData.canAccessParent = Administration of the parent tenant
TenantData.canAccessParent.help = Allows users of this tenant to manage the parent tenant.
TenantData.externalLoginIntervalDays = Interval for external login
TenantData.externalLoginIntervalDays.help = Controls after how many days a user, for whom "External Login Required" is active, must authenticate again via an external system.
TenantData.fullName = Full company name
TenantData.fullName.help = Contains the full name of the company.
TenantData.ipRange = IP range
TenantData.ipRange.help = If filled, all but the configured roles are taken from the user, the user should not have an IP within the configured IP range. Several ranges can be specified, separated by a comma.
TenantData.loginIntervalDays = Login Interval
TenantData.loginIntervalDays.help = Specifies the maximum number of days that a user remains logged in. After that, he or she must log on again.
TenantData.name = Display name
TenantData.name.help = Contains the name which is displayed in the system.
TenantData.parentCanAccess = Management by the parent tenant
TenantData.parentCanAccess.help = Allows users of the parent tenant to manage this tenant.
TenantData.rolesToKeep = Non-removable rollers
TenantData.rolesToKeep.help = Roles listed here (comma separated) are not withdrawn from the users if they do not access from any configured IP range.
TenantData.samlFingerprint = SAML Fingerprint
TenantData.samlFingerprint.help = Specifies the "SHA1 fingerprint" of the X509 certificate used by the SAML provider to sign a login. If multiple SAML providers are used, separate individual values with a comma.
TenantData.samlIssuerIndex = SAML applicant index
TenantData.samlIssuerIndex.help = Specifies the index under which this system is managed by the SAML provider. The default is <b>0</b>.
TenantData.samlIssuerName = SAML Provider Name
TenantData.samlIssuerName.help = Specifies the name of the issuing SAML provider. <i>Example: https://my-domain.local/adfs/services/trust</i> - If multiple SAML providers are used, separate individual values with a comma.
TenantData.samlIssuerUrl = SAML-URL
TenantData.samlIssuerUrl.help = Specifies the SAML call URL for login. <i>Example: https://my-domain.local/adfs/ls</i>
TenantData.samlRequestIssuerName = SAML applicant
TenantData.samlRequestIssuerName.help = Specifies the name under which this system is listed with the SAML provider.
Tenants.invalidTenant = This data object belongs to another tenant and must not be edited.
TimeseriesChartJobFactory.comparisonPeriod = Comparison period
TimeseriesChartJobFactory.currentPeriod = Current period
TimeseriesDataProvider.end = Until
TimeseriesDataProvider.start = From
TimeseriesDataProvider.unit = Unit
TraceData.changed = Last change
TraceData.changedAt = Last change
TraceData.changedBy = Last change by
TraceData.created = Created
TraceData.createdAt = Created
TraceData.createdBy = Created by
TraceData.infos = Information
Translations.langCodeError = Could not create translations. Error while getting language code '${lang}'.
Unit.DAY = Days
Unit.HOUR = Hours
Unit.MONTH = Months
Unit.WEEK = Weeks
Unit.YEAR = Years
UserAccount.changePassword = Change Password
UserAccount.email.help = The email address is required so that the system can inform the user about important events.
UserAccount.externalLoginMustBePerformed = You must authenticate yourself via an external system.
UserAccount.forcedExternalLoginNear = For security reasons, you will have to log in again via your external system soon. You can now log on again to set the time yourself.
UserAccount.forcedLogoutNear = For security reasons you will have to register again soon. You can now log in again to set the time yourself.
UserAccount.invalidOldPassword = The old password is incorrect.
UserAccount.plural = Users
UserAccount.roles = Permissions
UserAccount.security = Security
UserAccount.select = Take over user
UserAccount.selectMain = Switch to own user
UserAccount.username.help = With this unique name, the user logs into the system. If the form field is empty, the email address will be used (recommended).
UserAccount.warnAboutGeneratedPassword = Your password has been automatically assigned by the system. Please change your password timely.
UserAccountConroller.cannotGeneratePasswordForOwnUser = You cannot generate a password for your own user. Use the 'Change password' function.
UserAccountConroller.passwordGenerated = A password has been generated.
UserAccountConroller.passwordGeneratedAndSent = A password has been generated and sent to '${email}'.
UserAccountConroller.select = Take over
UserAccountController.cannotBecomeUser = You cannot take over the selected user.
UserAccountController.cannotDeleteSelf = You cannot delete your own user account.
UserAccountController.cannotLockSelf = You cannot lock your own user account.
UserAccountController.forgotPassword.reason = Your password has been reset by the "Forgot Password" function. (Triggered by IP: ${ip}).
UserAccountController.forgotPassword.subject = Your password has been reset
UserAccountController.generatedPassword.reason = Please log in to use ${product}.
UserAccountController.generatedPassword.subject = Your access data for ${product}
UserAccountController.logout = Log out
UserAccountController.noUserFoundForEmail = No user was found with the entered email address.
UserAccountController.tooManyUsersFoundForEmail = Several users were found with the entered email address.
UserAccountData.externalLoginRequired = External login required
UserAccountData.externalLoginRequired.help = Specifies whether the user must authenticate himself or herself via an external system at the interval specified by the client.
ValueInListCheck.errorMsg = The value '${value}' is not allowed for this field.
ValueInListCheck.remark = Allowed values: ${values}
VersionedFile.plural = Versions
VersionedFiles.noVersion = No version found
VersionedFiles.versionExistsConflict = The version ${date} for the path ${uniqueIdentifier} already exists and therefore cannot be used.
VFSController.actions = Actions
VFSController.copyPath = Copy filepath
VFSController.createDirectory = New directory
VFSController.directory = Directory
VFSController.directoryCreated = The directory was created.
VFSController.move = Move
VFSController.moved = The file was moved successfully.
VFSController.rename = Rename
VFSController.renamed = The file was successfully renamed.
VFSController.root = Files
VFSController.selectDirectory = Select directory
VFSController.selectFile = Select file
VFSController.unknownPath = The path '${path}' does not exist.
VirtualFile.cannotCreateAsDirectory = The directory '${file}' could not be created.
VirtualFile.cannotDelete = The file '${file}' could not be deleted.
VirtualFile.cannotRead = The file '${file}' cannot be read.
VirtualFile.cannotRename = The file '${file}' could not be renamed.
VirtualFile.cannotResolveChild = The path '${child}' cannot be resolved into '${path}'.
VirtualFile.cannotWrite = You cannot write to the file '${file}'.
VirtualFile.directoryDoesNotExist = The directory '${file}' does not exist.
VirtualFile.fileDoesNotExist = The file '${file}' does not exist.
VirtualFile.lastModified = Last modified
VirtualFile.noDirectory = '${file}' is not a directory.
VirtualFile.noFile = '${file}' is not a file.
VirtualFile.size = Size
VirtualFileSystem.invalidPath = The path is invalid and cannot be resolved: ${path}
VirtualObject.download = Download
VirtualObject.fileSize = Size
VirtualObject.physicalKey = Physical key
VirtualObject.plural = Files
VirtualObject.publicUrl = Public URL
VirtualObject.rename = Rename
VirtualObject.replaceContents = Replace contents
VirtualObject.unreference = Delete reference
VirtualObject.versions = Versions
XMLExportJobFactory.requireValidFile = Validate
XMLExportJobFactory.requireValidFile.help = Validates the exported file using the predefined XSD schema.
XMLImportJob.importCanceled = Importing the file '${fileName}' was cancelled as the file is invalid against the predefined XML Schema.
XMLImportJobFactory.requireValidFile = Validate data before import
XMLImportJobFactory.requireValidFile.help = If one of the provided XML schemas is selected, the import only occurs if the input file adheres to the predefined structure.
XMLValidatorErrorHandler.error = An error occurred during validation in line ${line}: ${message}

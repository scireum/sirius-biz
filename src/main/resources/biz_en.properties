Model.create = Create new
Model.details = Details
Model.id = ID
Model.name = Name
Model.description = Description
Model.email = Email
Model.priority = Priority
Model.config = Configuration
Model.tenant = Tenant
Model.links = Links
Tenant.plural = Tenants
Tenant.permissions = Permissions
Tenant.select = Switch tenant
Tenant.selectMain = Main tenant
UserAccount.select = Take over user
UserAccount.selectMain = Switch to own user
Tenant.administration = Administration
Tenant.parent = Parent tenant
Tenant.parent.help = If a parent tenant is specified, certain data objects are obtained from this tenant and administration is possible.
TenantController.cannotDeleteSelf = You cannot delete your own tenant.
TenantController.cannotBecomeTenant = You cannot manage the selected tenant.
UserAccountController.cannotBecomeUser = You cannot take over the selected user.
Model.userAccount = User
UserAccount.plural = Users
UserAccount.security = Security
UserAccount.roles = Permissions
UserAccount.email.help = The email address is required so that the system can inform the user about important events.
UserAccount.username.help = With this unique name, the user logs into the system. If the form field is empty, the email address will be used (recommended).
Model.code = Code
Model.overview = Overview
Model.address = Address
Model.password.set = Change Password
Model.password = Password
Model.confirmation = Confirmation
Model.password.hilarious = Insufficient
Model.password.hilarious.description = Passwords shorter than ${minLength} characters
Model.password.unsafe = Insecure
Model.password.unsafe.description = Passwords shorter than ${saneLength} characters or passwords only consisting of lowercase letters, uppercase letters or numbers.
Model.password.moderate = Moderately Safe
Model.password.moderate.description = Passwords consisting of uppercase / lowercase letters or numbers
Model.password.stateOfTheArt = Secure
Model.password.stateOfTheArt.description = Passwords consisting of letters and special characters
Model.password.recommended = Recommended
Model.password.confirmationMismatch = The entered password does not match the confirmation.
Model.password.minLengthError = The entered password is too short.
Model.login.keepLogin = Stay logged in
Model.login = Login
Model.login.user = User name
Model.login.password = Password
Model.login.login = Login
Model.login.forgotPassword = Forgot password
Model.login.emailRequired = Please provide an email address
Model.login.passwortReset = Reset Password
Model.login.forgotPassword.help = Please enter your email address here to reset your password. This will be sent to you by e-mail.
Model.login.resetPassword = Reset Password
Model.login.passwordResetted = Your password has been reset. You have received an email with the new password.
DatabaseController.schema = Database schema
DatabaseController.reason = Reason
DatabaseController.execute = Execute
DatabaseController.unknownChange = Unknown change
DatabaseController.help = <p>The following changes to the database schema are recommended so that the application can be executed.</p><p>Please note that manually created tables may also be proposed for deletion. Here you should check whether these tables should really be deleted.</p><p>In any case, it is recommended to perform a database backup before making changes.</p><p>Some changes, such as deleting a column, may only be executed after dependent changes (e.g. deleting FOREIGN KEYs) have been made.
DatabaseController.sql = SQL
AddressData.street = Street
AddressData.zip = Zip code
AddressData.city = City
InternationalAddressData.country = Country
ContactData.email = E-Mail
ContactData.phone = Phone
ContactData.mobile = Mobile phone
ContactData.fax = FAX
LoginData.username = User name
LoginData.numberOfLogins = No. Logins
LoginData.lastLogin = Last login
LoginData.passwordHash = Password Hash
LoginData.ucasePasswordHash = PasswordHashLittle
LoginData.password.set = Set password
LoginData.password.generate = Generate password
LoginData.password = Password
LoginData.generatedPassword = Generated Password
LoginData.accountLocked = Locked
LoginData.accountIsLocked = The user is locked.
LoginData.salt = salt
LoginData.apiToken = API code
PersonData.salutation = Salutation
PersonData.title = Title
PersonData.firstname = First name
PersonData.lastname = Last name
PersonData.birthday = Birthday
PersonData.offline = offline
TraceData.infos = Information
TraceData.created = Created
TraceData.changed = Last change
Model.codeList = Code list
CodeList.plural = Code lists
Model.codeListEntry = Entry
CodeListEntry.plural = Entries
CodeListController.codeMustBeFilled = The field "Code" must not be empty.
BizController.changesSaved = The changes have been saved
BizController.unknownObject = Unknown data object: '${id}' of type '${type}'.
BizController.objectDeleted = The object was deleted
BizController.illegalArgument = Incorrect input. Please correct the marked fields.
BizController.invalidReference = A relationship in '${owner}' should point to referenced object '${target}', but points to '${actual}' instead.
BizController.mustNotBeNew = An existing data object of type '${type}' is required.
UserAccountController.logout = Log out
UserAccountController.noUserFoundForEmail = No user was found with the entered email address.
UserAccountController.tooManyUsersFoundForEmail = Several users were found with the entered email address.
UserAccountController.forgotPassword.reason = Your password has been reset by the "Forgot Password" function. (Triggered by IP: ${ip}).
Menu.settings = Manage
TenantAware.invalidTenant = Error in field '${field}': The object must belong to the same tenant.
AddressData.fullAddressRequired = Error in '${name}': Please fill in all fields.
AddressData.partialAddressRejected = Error in '${name}': Please enter a full address.
AddressData.badZip = Error in '${name}': The zip code '${zip}' is invalid for the selected country.
ContactData.invalidPhone = Error in field '${field}': '${value}' is not a valid phone number.
Model.incident = Error
JournalEntry.plural = Change log
JournalEntry.tod = Date
JournalEntry.username = User
JournalEntry.userId = User ID
JournalEntry.targetName = Object
JournalEntry.targetId = Id
JournalEntry.targetType = Type
JournalEntry.subsystem = Subsystem
BizInterceptor.missingPermission = You need the permission '${permission}' to perform the action.
JobsController.logs = Protocols
JobsController.jobs = Jobs
JobsController.job = Job
JobsController.execute = Execute
JobDescription.title = Designation
ScopeDefaultConfigController.showDefaultConfig = default configuration
mail.hello = Hello
mail-password.yourCredentails = Your login data
mail-password.username = Username or email
mail-password.password = Password
mail-password.loginHere = Sign in here
StorageController.cannotAccessBucket = You may not access the contents of ${bucket} because you have not the required permissions or because it does not exist.
StorageController.buckets = File storage
StorageController.objects = Files
VirtualObject.unreference = Delete reference
VirtualObject.fileSize = Size
BucketInfo.numberOfObjects = Number of files
Storage.uploadFailed = An error occurred during upload: ${errorMessage} (${errorClass})
StorageController.uploadFile = Upload file
StoredObject.errInvalidExtension = Invalid file type
StoredObject.errTooLarge = file too large
StoredObject.errTooSmall = file too small
StoredObject.errEmpty = File is empty
StoredObject.uploadArea = Drag files here to upload them...
StoredObject.uploadBtn = Select file...
StoredObject.cancelUpload = Cancel
StoredObject.resetBtn = Reset
StoredObject.uploadFailed = Upload failed
StoredObject.specifyURL = Specify URL
StoredObject.URL = URL
VirtualObject.versions = Versions
VirtualObject.rename = Rename
VirtualObject.download = Download
VirtualObject.physicalKey = Physical key
VirtualObject.replaceContents = Replace contents
UserAccountConroller.passwordGenerated = A password has been generated.
ProfileController.myProfile = My profile
ProfileController.userProfile = User profile
ProfileController.invalidOldPassword = The old password is incorrect.
Model.oldPassword = Old password
Model.newPassword = New Password
Model.security = Security
Tenant.saml = Authentication via SAML 2.0
Tenant.suffixDays = Days
UserAccount.externalLoginMustBePerformed = You must authenticate yourself via an external system.
UserAccount.forcedLogoutNear = For security reasons you will have to register again soon. You can now log in again to set the time yourself.
UserAccount.forcedExternalLoginNear = For security reasons, you will have to log in again via your external system soon. You can now log on again to set the time yourself.
UserAccount.warnAboutGeneratedPassword = Your password has been automatically assigned by the system. Please change your password timely.
UserAccount.changePassword = Change Password
UserAccount.invalidOldPassword = The old password is incorrect.
SAMLController.loginViaSAML = Registration via SAML
MailLoggedMessage.plural = Mails
MailLoggedMessage.tod = Date
MailLoggedMessage.sender = Sender
MailLoggedMessage.receiver = Recipient
MailLoggedMessage.node = Machine
MailLoggedMessage.mailExtension = Template
MailLoggedMessage.success = Successful
MailLoggedMessage.messageId = Message ID
MailLoggedMessage.senderName = Sender name
MailLoggedMessage.receiverName = Recipient name
MailLoggedMessage.text = Text
MailLoggedMessage.html = HTML
LoggedMessage.plural = System log
LoggedMessage.level = Level
LoggedMessage.tod = Date
LoggedMessage.category = Logger
LoggedMessage.user = User
LoggedMessage.message = Message
LoggedMessage.node = Machine
MailProtocol.plural = E-mails
MailProtocol.success = Successful
MailProtocol.senderName = Sender name
MailProtocol.receiverName = Recipient name
MailProtocol.text = Text
MailProtocol.html = HTML
MailProtocol.tod = Date
MailProtocol.messageId = Message ID
MailProtocol.type = Type
MailProtocol.sender = Sender
MailProtocol.receiver = Recipient
MailProtocol.node = Machine
StoredIncident = Error
StoredIncident.category = Category
StoredIncident.node = Machine
StoredIncident.plural = Error log
StoredIncident.lastOccurrence = Last time
StoredIncident.firstOccurrence = For the first time
StoredIncident.user = User
StoredIncident.numberOfOccurrences = Quantity
StoredIncident.stack = Stacktrace
StoredIncident.location = Error source
StoredIncident.mdc = Details
StoredIncident.mdc.name = Name
StoredIncident.mdc.value = Value
IncidentController.totalIncidents = Number of entries
UserAccountConroller.cannotGeneratePasswordForOwnUser = You cannot generate a password for your own user. Use the 'Change password' function.
AuditLogEntry.ip = IP
AuditLogEntry.plural = Security log
AuditLogEntry.timestamp = Time
LoginData.password.generateAndSend = Generate and send password
UserAccountConroller.passwordGeneratedAndSent = A password has been generated and sent to '${email}'.
LoginData.password.hiddenGenerated = Generated password hidden
LoginData.password.hiddenGeneratedShort = hidden
AuditLogEntry.causedBy = Causer
AuditLog.switchedToMainTenant = User has switched to the main client.
AuditLog.selectedTenant = User has transferred clients.
AuditLog.passwordChange = Password changed by user.
AuditLog.passwordChangeFailed = An error occured while the user tried to change the password.
AuditLog.lockedOrNonexitentUserTriedLogin = A locked or non existing user attempted a login.
AuditLog.externalLoginRequired = The login was aborted as an external login is required.
AuditLog.apiTokenLogin = Login via API token.
AuditLog.passwordLogin = Login via password.
AuditLog.loginRejected = Login rejected: Invalid password or API token.
AuditLog.passwordGenerated = A new password was generated by the user.
AuditLog.resetPasswordRejected = The password wasn't reset as the user account is locked.
AuditLog.resetPassword = The password has been reset by the user.
AuditLog.switchedToMainUser = User has switched back to the main account.
AuditLog.selectedUser = User has taken over another user.
VirtualObject.publicUrl = Public URL
AuditLogEntry.user = User
AuditLogEntry.tenant = Company
CodeList.noPipeAllowed = The field "Code" must not contain the character '|'.
VersionedFiles.noVersion = No version found
VersionedFiles.versionExistsConflict = The version ${date} for the path ${uniqueIdentifier} already exists and therefore cannot be used.
JobFactory.plural = Jobs
JobFactory.execute = Execute
Process.plural = Processes
Process.title = Name
Process.state = Status
Process.userName = User
Process.tenantName = Tenant
Process.scheduled = Scheduled
Process.started = Started
Process.runtime = Runtime
Process.completed = Completed
Process.numLogs = Messages
Process.counters = Performance
Process.logs = Messages
Process.lastLogs = Latest messages
Process.stateMessage = Last status
Process.files = Files
Process.externalLinks = External links
ProcessLog.message = Message
ProcessLog.timestamp = Time
ProcessLog.node = Machine
ProcessLog.state = Status
ProcessLog.type = Type
ProcessLog.actionMarkOpen = Reopen
ProcessLog.actionMarkResolved = Resolve
ProcessLog.actionMarkIgnored = Ignore
ProcessLog.format = Message from process ${process} (${timestamp})
ProcessLogState.OPEN = Open
ProcessLogState.RESOLVED = Resolved
ProcessLogState.IGNORED = Ignored
ProcessLogType.INFO = Information
ProcessLogType.SUCCESS = Successful
ProcessLogType.WARNING = Warning
ProcessLogType.ERROR = Error
ProcessState.STANDBY = Standby
ProcessState.RUNNING = Active
ProcessState.CANCELED = Canceled
ProcessState.TERMINATED = Completed
Process.lastInteraction = Last interaction
ProcessController.unknownOutput = Unknown output: ${output}
ProcessController.unknownAction = Unknown action: ${action}
ProcessController.logUpdated = The status has been updated.
Parameter.required = The parameter ${name} must be filled.
Parameter.invalidValue = Error in parameter ${name}: ${message}
BatchProcessJobFactory.scheduled = The job has been added to the execution queue.
BatchProcessJobFactory.jobLink = Job
BatchProcessTaskExecutor.started = The execution of the job has been started.
BatchProcessTaskExecutor.completedButFailed = The execution was terminated, errors occurred.
BatchProcessTaskExecutor.completedSuccessfully = The execution was successfully completed.
InteractiveJobFactory.additionalMetrics = Additional metrics
TimeseriesDataProvider.start = From
TimeseriesDataProvider.end = Until
TimeseriesDataProvider.unit = Unit
TimeseriesChartJobFactory.currentPeriod = Current period
TimeseriesChartJobFactory.comparisonPeriod = Comparison period
Unit.HOUR = Hours
Unit.DAY = Days
Unit.WEEK = Weeks
Unit.MONTH = Months
Unit.YEAR = Years
ComparisonPeriod.PREVIOUS_YEAR = Previous year
ComparisonPeriod.PREVIOUS_MONTH = Previous month
ComparisonPeriod.PREVIOUS_WEEK = Previous week
ComparisonPeriod.PREVIOUS_DAY = Previous day
JobCategory.report = Reports
JobCategory.misc = Other
JobCategory.export = Exports
JobCategory.import = Imports
JobCategory.check = Checks
Jobs.matchingJobs = Matching jobs
Model.invalidEmail = Invalid email address.
UserAccountController.cannotDeleteSelf = You cannot delete your own user account.
MoveIndexAliasJobFactory.descriptorParameter = Scheme
MoveIndexAliasJobFactory.destinationParameter = Target Index
ReindexJobFactory.descriptorParameter = Scheme
LineBasedAliases.column = Column ${column}
ImportJob.invalidReference = A relationship in '${owner}' should point to referenced object '${target}', but points to '${actual}' instead.
AuditLog.passwordReHashed = The password has been re-hashed using a stronger cryptographic method.
LoginData.changeFingerprint = Log out on all devices
ProcessController.enableDebugging = Enable debugging
ProcessController.disableDebugging = Disable debugging
CodeLists.noCurrentTenant = No client could be found for the specified code list
FileImportJob.fileNotSupported = The file is not supported.
FileImportJob.importingZipFile = The file is unpacked for import.
FileImportJob.importingZippedFile = The unzipped file '${filename}' is imported.
FileImportJob.noZippedFileFound = The archive does not contain a supported file.
ProcessController.reference = Reference
SchedulderController.planning = Planning
SchedulderController.parameters = Parameters
SchedulerEntry.plural = Planned designs
SchedulerEntry.year = Year
SchedulerEntry.month = month
SchedulerEntry.dayOfMonth = Day
SchedulerEntry.dayOfWeek = Weekday
SchedulerEntry.hourOfDay = hour
SchedulerEntry.minute = Minute
SchedulerEntry.enabled = Activated
SchedulerEntry.runs = Remaining remarks
SchedulerEntry.lastExecution = Last execution
SchedulerEntry.numberOfExecutions = Number of versions
SchedulerEntry.continue = Continue
SchedulerEntry.create = New planned execution
SchedulerEntry.invalidPatternInField = Invalid value in field ${field}: ${msg}
SchedulerEntry.invalidPattern = The input '${pattern}' is invalid, please refer to the field notes.
JobConfigData.unknownJob = Unknown job: ${job}
JobConfigData.job = Job
JobConfigData.label = Designation
JobConfigData.label.help = Enter a name or short description for the scheduled task here.
SchedulerData.year = Year
SchedulerData.year.help = Enter the year in which the job should be executed. Use * for any year. Separate multiple values with a comma.
SchedulerData.month = month
SchedulerData.month.help = Enter the month in which the job is to be executed. Possible values are 1-12, where 1 stands for January. Use * for any month. Use /N to select months divisible by N. Separate multiple values with a comma.
SchedulerData.dayOfMonth = Day
SchedulerData.dayOfMonth.help = Specify the day on which the job is to be executed. Possible values are 1-31, use * for any day. Use /N to select days divisible by N. Separate multiple values with a comma.
SchedulerData.dayOfWeek = Weekday
SchedulerData.dayOfWeek.help = Enter the day of the week on which the job is to be executed. Possible values are 1-7, where 1 stands for Monday. Use * for any day of the week. Use /N to select weekdays divisible by N. Separate multiple values with a comma.
SchedulerData.hourOfDay = hour
SchedulerData.hourOfDay.help = Enter the hours in which the job should be executed. Possible values are 0-23. Use * for any hours. Use /N to select hours that are divisible by N. Separate multiple values with a comma.
SchedulerData.minute = Minute
SchedulerData.minute.help = Enter the minute in which the job should be executed. Possible values are 0-59. Use * for any minutes. Use /N to select minutes divisible by N. Separate multiple values with a comma.
SchedulerData.enabled = Activated
SchedulerData.enabled.help = Select here whether automatic execution is currently active or paused.
SchedulerData.enabled.true = Active
SchedulerData.enabled.false = Inactive
SchedulerData.runs = Remaining remarks
SchedulerData.runs.help = Specify here whether the system should stop executing this job after a certain number of executions. Leave the field blank for an unlimited number of executions.
SchedulerData.userId = User
SchedulerData.userId.help = Select here as which user the job should be started. Make sure that the user is not locked and has all the required authorizations.
JobSchedulerLoop.jobLink = Planned execution
JobSchedulerLoop.scheduledExecutionInfo = The job was started by the scheduled execution of '${entry}'...
SQLUserAccountImportJobFactory.label = Import user accounts
SQLUserAccountImportJobFactory.description = Imports user accounts using a CSV or Excel file.
Model.lang = Language
Language.ar = Arabic
Language.cn = Chinese
Language.cs = Czech
Language.de = German
Language.en = English
Language.es = Spanish
Language.fi = Finnish
Language.fr = French
Language.gr = Greek
Language.hu = Hungarian
Language.it = Italian
Language.ja = Japanese
Language.ko = Korean
Language.nl = Dutch
Language.no = Norwegian
Language.pl = Polish
Language.pt = Portuguese
Language.ro = Romanian
Language.rs = Serbian
Language.ru = Russian
Language.se = Swedish
Language.si = Slovenian
Language.sk = Slovak
Language.sl = Slovenian
Language.tr = Turkish
Language.ua = Ukrainian
Language.vls = Flemish
Language.zh = Chinese
Isenguard.rateLimitInfo = Rate limits
RateLimitEventsReportJobFactory.label = Rate Limit Events
RateLimitEventsReportJobFactory.description = Lists when functions or calls were blocked because a rate limiting became active.
RateLimitEventsReportJobFactory.label.filtered = Rate Limit Events (filtered)
RateLimitEventsReportJobFactory.description.filtered = Lists for the selected data object when functions or calls were blocked because a rate limiting was active.
RateLimitReportJobFactory.label = Rate Limit Status
RateLimitReportJobFactory.description = Shows the currently set rate limits for you.
BlockedIPsReportJobFactory.label = Blocked IP addresses
BlockedIPsReportJobFactory.description = Returns a list of currently blocked IP addresses.
Packages.packages = Packages
Packages.upgrades = Upgrades
Packages.permission.name = Name
Packages.permission.description = Description
Packages.permission.active = Active
Packages.permission.denied = Denied
Packages.permission.default = Default
Packages.permission.defaultValue = Default value
Model.saml = SAML
UserAccountController.cannotLockSelf = You cannot lock your own user account.
LoginData.lock = Lock
LoginData.unlock = Unlock
CodeLists.missingEntry = The required entry '${code}' in the code list '${codeList}' does not exist.
BizController.deletingInBackground = The entity contains some linked entities and is therefore deleted in the background.
BizController.deleteProcess = Delete process
BizController.deleteProcessTitle = Deletion of '${entity}'
BizController.startDelete = Starting the deletion of: ${entity}.
BizController.deleteCompleted = The delete process has been completed.
CodeList = Code list
Process = Process
ProcessLog.plural = Messages
VersionedFile.plural = Versions
VirtualObject.plural = Files
TenantController.select = Take over
UserAccountConroller.select = Take over
PackageData.packageString = Service package
PackageData.upgrades = Upgrades
UserAccountController.forgotPassword.subject = Your password has been reset
UserAccountController.generatedPassword.reason = Please log in to use ${product}.
UserAccountController.generatedPassword.subject = Your access data for ${product}
Language.da = Danish
LoginData.accountLocked.help = Determines if this user account is locked. A locked user cannot access the system in any way.
TenantData.accountNumber = Customer number
TenantData.canAccessParent = Administration of the parent tenant
TenantData.canAccessParent.help = Allows users of this tenant to manage the parent tenant.
TenantData.externalLoginIntervalDays = Interval for external login
TenantData.externalLoginIntervalDays.help = Controls after how many days a user, for whom "External Login Required" is active, must authenticate again via an external system.
TenantData.ipRange = IP range
TenantData.ipRange.help = If filled, all but the configured roles are taken from the user, the user should not have an IP within the configured IP range. Several ranges can be specified, separated by a comma.
TenantData.loginIntervalDays = Login Interval
TenantData.loginIntervalDays.help = Specifies the maximum number of days that a user remains logged in. After that, he or she must log on again.
TenantData.parentCanAccess = Management by the parent tenant
TenantData.parentCanAccess.help = Allows users of the parent tenant to manage this tenant.
TenantData.rolesToKeep = Non-removable rollers
TenantData.rolesToKeep.help = Roles listed here (comma separated) are not withdrawn from the users if they do not access from any configured IP range.
TenantData.samlFingerprint = SAML Fingerprint
TenantData.samlFingerprint.help = Specifies the "SHA1 fingerprint" of the X509 certificate used by the SAML provider to sign a login. If multiple SAML providers are used, separate individual values with a comma.
TenantData.samlIssuerIndex = SAML applicant index
TenantData.samlIssuerIndex.help = Specifies the index under which this system is managed by the SAML provider. The default is <b>0</b>.
TenantData.samlIssuerName = SAML Provider Name
TenantData.samlIssuerName.help = Specifies the name of the issuing SAML provider. <i>Example: https://my-domain.local/adfs/services/trust</i> - If multiple SAML providers are used, separate individual values with a comma.
TenantData.samlIssuerUrl = SAML-URL
TenantData.samlIssuerUrl.help = Specifies the SAML call URL for login. <i>Example: https://my-domain.local/adfs/ls</i>
TenantData.samlRequestIssuerName = SAML applicant
TenantData.samlRequestIssuerName.help = Specifies the name under which this system is listed with the SAML provider.
TenantData.name = Display name
TenantData.name.help = Contains the name which is displayed in the system.
TenantData.fullName = Full company name
TenantData.fullName.help = Contains the full name of the company.
Language.lv = Latvian
Isenguard.limitReached = A rate limit was reached by the user.
MongoUserAccountImportJobFactory.description = Imports user accounts using a CSV or Excel file.
MongoUserAccountImportJobFactory.label = Import user accounts
Model.virtualObject = File
BasePageHelper.sort = Sort
ProcessController.sortAsc = Oldest first
ProcessController.sortDesc = Newest first
JobsController.showInfos = Documentation
Permission.administrator = Administrator
Permission.administrator.description = Allows the user to change system settings.
Permission.file-manager = Manage files
Permission.file-manager.description = Enables you to maintain files in the file repository.
Permission.jobs-execution = Execute jobs
Permission.jobs-execution.description = Allows the user to execute jobs.
Permission.jobs-manager = Manage Jobs
Permission.jobs-manager.description = Allows the user to execute jobs, view all execution logs and schedule automatic executions.
Permission.user-administrator = Manage users
Permission.user-administrator.description = Allows users to create or edit.
Permission.feature-provide-jobs = Provides jobs
FieldDefinition.aliasRemark = Alternative names: ${aliases}
FieldDefinition.typeString.plain = Text
FieldDefinition.typeString.length = Text (${length})
FieldDefinition.typeNumber.plain = Number
FieldDefinition.typeNumber.length = Number (${precision},${scale})
FieldDefinition.typeBoolean = Yes/No
FieldDefinition.typeDate = Date
FieldDefinition.typeOther = Other
ValueInListCheck.remark = Allowed values: ${values}
ValueInListCheck.errorMsg = The value '${value}' is not allowed for this field.
RequiredCheck.errorMsg = The field is a mandatory field and must not be empty.
RequiredCheck.remark = This field is a mandatory field.
LengthCheck.errorMsg = The value must not be longer than ${maxLength} characters. (length: ${length}).
LengthCheck.remark = Maximum field length: ${maxLength}
AmountRangeCheck.minMaxRemark = The value must be ${minOperator} ${min} and ${maxOperator} ${max}.
AmountRangeCheck.remark = The value must be ${operator} ${limit}.
AmountRangeCheck.errorMsg = The value (${value}) is invalid. The value must be ${operator} ${limit}.
ImportDictionary.tooManyColumns = The record contains too many columns (${count}). ${columns} columns were expected.
ImportDictionary.unknownColumn = The column ${index} ('${column}') could not be assigned.
ImportDictionary.wrongColumn = In the column ${index} '${expected}' was expected, but '${column}' was found.
ImportDictionary.fieldError = Error in field ${field} (${label}): ${message}
ImportDictionary.severeFieldError = Exception error while checking field ${field} (${label}): ${message}
ImportDictionary.mappingFunction = Column assignments
ImportDictionary.fields = Fields
FieldDefinition.name = Name
FieldDefinition.type = Type
FieldDefinition.remarks = Remarks
Language.lt = Lithuanian
VirtualFile.size = Size
VirtualFile.lastModified = Last modified
VFSController.root = Files
VirtualFile.cannotDelete = The file '${file}' could not be deleted.
VirtualFile.cannotRename = The file '${file}' could not be renamed.
VirtualFile.cannotCreateAsDirectory = The directory '${file}' could not be created.
VirtualFile.cannotWrite = You cannot write to the file '${file}'.
VirtualFile.cannotRead = The file '${file}' cannot be read.
VirtualFile.fileDoesNotExist = The file '${file}' does not exist.
VirtualFile.directoryDoesNotExist = The directory '${file}' does not exist.
VirtualFile.noDirectory = '${file}' is not a directory.
VirtualFile.noFile = '${file}' is not a file.
VirtualFile.cannotResolveChild = The path '${child}' cannot be resolved into '${path}'.
VirtualFileSystem.invalidPath = The path is invalid and cannot be resolved: ${path}
DeleteTenantJobFactory.simulateInfo = The deletion is only simulated.
DeleteTenantJobFactory.aborting = An error occurred while deleting, the process is aborted.
DeleteTenantJobFactory.deletingMainEntity = Delete the data object of the client.
DeleteTenantJobFactory.label = Delete client
DeleteTenantJobFactory.description = Deletes a selected client and all associated data.
DeleteTenantJobFactory.title = Delete client "${name}"
DeleteTenantJobFactory.title.simulate = Delete client "${name}" (SIMULATED)
AmountScaleCheck.remark = The value must not exceed ${precision} digits and ${scale} decimal places.
AmountScaleCheck.errorMsg.notNumeric = The value (${value}) is invalid because it is not a number.
AmountScaleCheck.errorMsg.scaleExceeded = The value (${value}) is invalid because it consists of more than ${scale} decimal places.
AmountScaleCheck.errorMsg.precisionExceeded = The value (${value}) is invalid because it consists of more than ${precision} digits.
DeleteTenantTask.beforeExecution.no = No ${name} to delete.
DeleteTenantTask.beforeExecution.one = Deleting 1 ${name}.
DeleteTenantTask.beforeExecution.many = Deleting ${count} ${name}.
CheckForChildrenTask.hasChildren = The child tenants of this tenant need to be deleted first!
VFSController.actions = Actions
VFSController.rename = Rename
VFSController.renamed = The file was successfully renamed.
VFSController.moved = The file was moved successfully.
VFSController.move = Move
VFSController.createDirectory = New directory
VFSController.selectDirectory = Select directory
VFSController.selectFile = Select file
VFSController.directory = Directory
VFSController.directoryCreated = The directory was created.
FileParameter.invalidPath = The file '${path}' was not found.
DirectoryParameter.invalidPath = The directory '${path}' was not found.
Process.persistencePeriod = Retention period
Process.expires = Planned deletion time
DeleteProcessesTask.deleteCount = No processes present | A process is deleted | ${count} processes are deleted.
PersistencePeriod.ONE_DAY = 1 day
PersistencePeriod.THREE_DAYS = 3 days
PersistencePeriod.FOURTEEN_DAYS = 14 days
PersistencePeriod.ONE_MONTH = 1 month
PersistencePeriod.THREE_MONTHS = 3 months
PersistencePeriod.ONE_YEAR = 1 year
PersistencePeriod.THREE_YEARS = 3 years
PersistencePeriod.SIX_YEARS = 6 years
PersistencePeriod.TEN_YEARS = 10 years
DateTimeFormatCheck.errorMsg = The value '${value}' does not match the date format '${format}'.
DateTimeFormatCheck.remark = Date format: ${format}
EntityParameter.mustExist = An existing data object is required.
ImportDictionary.missingColumn = The ${index} ('${expected}') column is missing.
ImportDictionary.superfluousColumn = The column ${index} ('${column}') is unexpected.
SQLUserAccountExportJobFactory.description = Exports users to a CSV or Excel file.
SQLUserAccountExportJobFactory.label = Exporting users
MongoUserAccountExportJobFactory.description = Exports users to a CSV or Excel file.
MongoUserAccountExportJobFactory.label = Exporting users
LineBasedJob.errorInRow = Error in line ${row}: ${message}
LineBasedJob.failureInRow = Error in row ${row}: ${errorMessage} (${errorClass})
LineBasedJob.row = Line
EntityImportJob.cannotHandleEntity = The data object '${entity}' cannot be imported: ${message}
DictionaryBasedImportJobFactory.ignoreEmpty = Ignore empty values
DictionaryBasedImportJobFactory.ignoreEmpty.help = Specifies that missing values are skipped instead of emptying the corresponding target field.
EntityImportJobFactory.importMode = Mode
EntityImportJobFactory.importMode.help = Specifies which lines of the file are taken into account. All other lines are skipped.
ImportMode.NEW_AND_UPDATES = Process all lines
ImportMode.UPDATE_ONLY = Update existing records only
ImportMode.NEW_ONLY = Only create new data records
EntityImportJob.rowIgnored = line skipped
EntityExportJobFactory.templateModes = If a template exists, the column assignments are determined automatically using the first line and the field names (or alternative descriptions). Upper/lower case and spaces are ignored. If the template contains further rows, these are (if possible) enriched instead of outputting all data records.
BaseFileParameter.invalidFileExtension = The file '${name}' contains none of the valid file extensions: ${extensions}
FileOrDirectoryParameter.invalidPath = ${path}' is neither a file nor an existing target directory.
EntityExportJob.learningMapping = Determine the columns from the contents of row ${row}...
EntityExportJob.startingTemplateBasedExport = Begin enrichment of the given data...
EntityExportJob.exportWithDefaultMapping = The export contains the standard columns because no template was selected...
EntityExport.fullExport = Export all applicable records, because either no template was selected or the template does not contain any additional data...
FileExportJobs.tooManyFiles = No new file could be created because all file names (${firstFile} to ${lastFile}) already exist.
FileExportJobFactory.destination = Objective
FileExportJobFactory.destination.help = Select a target directory or a target file here. If you leave the field empty, the file will be attached to the export process.
FileImportJobFactory.file = File
ExportFileType.CSV = CSV file
ExportFileType.XLS = MS Excel '97 (.xls)
ExportFileType.XLSX = MS Excel (.xlsx)
LineBasedExportJobFactory.fileType = File type
LineBasedExportJobFactory.fileType.help = Select the type of the file to be exported here. If you have already selected a target file, the format is determined by its file extension.
EntityExportJobFactory.templateFile = Template
EntityExportJobFactory.templateFile.help = Select a CSV- or MS Excel file which specifies a different column order. This file can also contain additional lines, which are then completed by the system.
Process.processType = Type
ProcessLog.messageType = Message type
PermissionData.permissions = Permissions
JobPreset.plural = Job templates
JobsController.presets = Templates
JobsController.usePreset = Apply
JobsController.createPreset = Create template
JobsController.createPreset.help = Enter the name of the template here. Use the name of an existing template to update it.
BlobStorageSpace.work.description = Contains work files for processing by the system or results from exports and checks.
BasicBlobStorageSpace.cannotRenameDuplicateName = The name is already used by another directory or file.
BasicBlobStorageSpace.cannotMoveAcrossSpaces = Moving across file system boundaries is not possible. Please use the 'Move' job.
BasicBlobStorageSpace.cannotMoveDuplicateName = Moving is not possible because a directory or file with that name already exists.
BasicBlobStorageSpace.cannotMoveIntoLoop = It is not possible to move them, as this would create a cyclic dependency.
BasicBlobStorageSpace.cannotRenameRoot = The root directory cannot be renamed.
VFSController.unknownPath = The path '${path}' does not exist.
LineBasedJob.erroneousRow = Error
ImportMode.CHECK_ONLY = Check only, do not save
EntityImportJob.entityCreated = New creation
EntityImportJob.entityUpdated = Update
DeleteTenantJobFactory.takeAction = Really delete?
DeleteTenantJobFactory.takeAction.help = If 'No' is selected, deletion is only simulated.
ExportLogsAsFileTaskExecutor.completed = The export was successfully completed.
ExportLogsAsFileTaskExecutor.reportTargetFile = The output '${outputLabel}' is exported as file '${filename}' and attached to the process.
Processes.restarted = The process was restarted: ${reason}
ProcessController.export = Export
ProcessController.exportLogsReason = Exporting messages as a file
ProcessController.exportOutputReason = Export '${output}' to file
ProcessController.exportStarted = The export has been started, the result file is attached to this process.
Tenants.invalidTenant = This data object belongs to another tenant and must not be edited.
LoginData.lastExternalLogin = Last login (external)
LoginData.lastPasswordChange = Last password change
JobsRoot.description = Contains a subdirectory for each job that can process a file. This again contains one subdirectory for each job template, which defines the remaining parameters. If a file is uploaded here, the corresponding job is started with it.
FieldDefinition.typeStringList = List
FieldDefinition.typeDateTime = Date + time
FieldDefinition.typeTime = Time
EntityImportJobFactory.automaticMappings = The column assignments are determined automatically using the first line and the field names (or alternative descriptions). Upper/lower case and spaces are ignored.
SQLCodeListImportJobFactory.description = Imports a code list from a CSV or Excel file.
SQLCodeListImportJobFactory.label = Import code list
SQLCodeListExportJobFactory.description = Exports a code list as CSV or Excel file.
SQLCodeListExportJobFactory.label = Export code list
MongoCodeListImportJobFactory.description = Imports a code list from a CSV or Excel file.
MongoCodeListImportJobFactory.label = Import code list
MongoCodeListExportJobFactory.description = Exports a code list as CSV or Excel file.
MongoCodeListExportJobFactory.label = Export code list
CodeLists.missingList = The code list '${codeList}' does not exist.
TraceData.changedAt = Last change
TraceData.createdAt = Created
CodeListData.autofill = Automatic filling
CodeListData.autofill.help = Specifies whether unknown entries should be created automatically.
AddressData.invalidCountry = Invalid country in '${name}': ${error}
PersonData.invalidSalutation = Invalid value in the salutation field: ${error}
UserAccountData.externalLoginRequired = External login required
UserAccountData.externalLoginRequired.help = Specifies whether the user must authenticate himself or herself via an external system at the interval specified by the client.
TraceData.changedBy = Last change by
TraceData.createdBy = Created by
DatabaseController.realm = Database
Country._all = Worldwide
Country.ae = United Arab Emirates
Country.ar = Argentina
Country.at = Austria
Country.au = Australia
Country.be = Belgium
Country.br = Brazil
Country.bu = Bulgaria
Country.by = Belarus
Country.ca = Canada
Country.ch = Switzerland
Country.cn = China
Country.cz = Czechia
Country.de = Germany
Country.dk = Denmark
Country.ee = Estonia
Country.es = Spain
Country.fi = Finland
Country.fr = France
Country.gb = United Kingdom
Country.gr = Greece
Country.hu = Hungary
Country.ie = Ireland
Country.il = Israel
Country.in = India
Country.it = Italy
Country.jp = Japan
Country.kr = South Korea
Country.li = Liechtenstein
Country.lt = Lithuania
Country.lu = Luxembourg
Country.lv = Latvia
Country.mt = Malta
Country.mx = Mexico
Country.nl = Netherlands
Country.no = Norway
Country.none = None
Country.nz = New Zealand
Country.pl = Poland
Country.pt = Portugal
Country.ro = Romania
Country.row = Rest of the world
Country.rs = Serbia
Country.ru = Russia
Country.sa = Saudi Arabia
Country.se = Sweden
Country.si = Slovenia
Country.sk = Slovakia
Country.tr = Turkey
Country.ua = Ukraine
Country.us = USA
Country.za = South Africa
DisasterController.title = Maintenance mode
DisasterController.maintenanceMessage = Notification of maintenance work
DisasterController.message = Message
DisasterController.date = Date
DisasterController.time = Time
DisasterController.lock = Locking the user interface
DisasterController.locked = Lockout activated
DisasterController.lockMessageHelp = Specify the message that is displayed when the user interface is locked. Note that the lock is only performed if both a message is specified and the <b>lock is activated</b>. The date and time can be used to manually set the point in time when the lock takes effect. If the date or the time is empty, the lock takes effect immediately.
DisasterController.previewMessageHelp = Enter the message for announcing maintenance work here. The date and time can be used to manually set the time from when the message is displayed. If the date or time is empty, the message is displayed immediately.
Language.el = Greek
Language.fa = Farsi
LineBasedImportExportJobFactory.outputFile = Output file
DateRangeParameter.label = Period
VFSController.copyPath = Copy filepath
CodeListEntryData.additionalValue = Additional value
CodeListEntryData.value = Value

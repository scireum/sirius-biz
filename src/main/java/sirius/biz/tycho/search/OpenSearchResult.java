/*
 * Made with all the love in the world
 * by scireum in Remshalden, Germany
 *
 * Copyright by scireum GmbH
 * http://www.scireum.de - info@scireum.de
 */

package sirius.biz.tycho.search;

import sirius.kernel.commons.StringCleanup;
import sirius.kernel.commons.Strings;
import sirius.kernel.di.std.Part;
import sirius.kernel.health.Exceptions;
import sirius.kernel.health.Log;
import sirius.pasta.noodle.compiler.CompileException;
import sirius.pasta.noodle.sandbox.SandboxMode;
import sirius.pasta.tagliatelle.Tagliatelle;
import sirius.pasta.tagliatelle.Template;
import sirius.pasta.tagliatelle.compiler.TemplateCompilationContext;
import sirius.pasta.tagliatelle.compiler.TemplateCompiler;
import sirius.pasta.tagliatelle.rendering.RenderException;

import java.io.FileNotFoundException;
import java.util.Optional;

/**
 * Represents a result as generated by a {@link OpenSearchProvider}.
 */
public class OpenSearchResult {

    @Part
    private static Tagliatelle tagliatelle;

    private String label;
    private String url;
    private String htmlDescription;

    /**
     * Specifies the label which will be the clickable main action.
     *
     * @param label the label of the main action
     * @return the result itself for fluent method calls.
     */
    public OpenSearchResult withLabel(String label) {
        this.label = label;
        return this;
    }

    /**
     * Specifies the URL to invoke if the result label is clicked.
     * <p>
     * Use <tt>javascript:someFunction()</tt> to invoke a JS callback rather than navigating somewhere.
     *
     * @param url the action to open / execute
     * @return the result itself for fluent method calls.
     */
    public OpenSearchResult withURL(String url) {
        this.url = url;
        return this;
    }

    /**
     * Provides an additional description to show.
     *
     * @param description the description of this result
     * @return the result itself for fluent method calls.
     */
    public OpenSearchResult withDescription(String description) {
        withHtmlDescription(Strings.cleanup(description, StringCleanup::escapeXml));
        return this;
    }

    /**
     * Provides an additional HTML description to show.
     *
     * @param htmlDescription the description of this result, expected to contain HTML.
     * @return the result itself for fluent method calls.
     */
    public OpenSearchResult withHtmlDescription(String htmlDescription) {
        this.htmlDescription = htmlDescription;
        return this;
    }

    /**
     * Renders a given template code as an additional description to show.
     *
     * @param template code to render
     * @param args     used in the template
     * @return the result itself for fluent method calls.
     */
    public OpenSearchResult withTemplateFromCode(String template, Object... args) {
        try {
            TemplateCompilationContext context = tagliatelle.createInlineCompilationContext("OpenSearchResult",
                                                                                            template,
                                                                                            SandboxMode.DISABLED,
                                                                                            null);
            TemplateCompiler templateCompiler = new TemplateCompiler(context);
            templateCompiler.compile();
            this.htmlDescription = context.getTemplate().renderToString(args);
        } catch (RenderException | CompileException exception) {
            Exceptions.handle(Log.APPLICATION, exception);
        }
        return this;
    }

    /**
     * Renders a given template file as an additional description to show.
     *
     * @param path where to find the template
     * @param args used in the template
     * @return the result itself for fluent method calls.
     */
    public OpenSearchResult withTemplateFromPath(String path, Object... args) {
        try {
            Optional<Template> template = tagliatelle.resolve(path, null);
            if (template.isEmpty()) {
                Exceptions.handle(Log.APPLICATION, new FileNotFoundException());
                return this;
            }
            this.htmlDescription = template.get().renderToString(args);
        } catch (RenderException | CompileException exception) {
            Exceptions.handle(Log.APPLICATION, exception);
        }
        return this;
    }

    public String getLabel() {
        return label;
    }

    public String getUrl() {
        return url;
    }

    public String getHtmlDescription() {
        return htmlDescription;
    }
}

/*
 * Made with all the love in the world
 * by scireum in Remshalden, Germany
 *
 * Copyright by scireum GmbH
 * http://www.scireum.de - info@scireum.de
 */

package sirius.biz.process.output;

import sirius.db.mixing.Nested;
import sirius.db.mixing.types.StringMap;
import sirius.kernel.di.GlobalContext;
import sirius.kernel.di.std.Part;
import sirius.kernel.nls.NLS;

import java.util.Map;
import java.util.Optional;
import java.util.concurrent.ConcurrentHashMap;

/**
 * Describes an output generated by a {@link Process}.
 * <p>
 * Note that this only contains the metadata. The real data making up the output is stored as
 * {@link sirius.biz.process.logs.ProcessLog log entries}.
 */
public class ProcessOutput extends Nested {

    /**
     * Contains the name of the output.
     * <p>
     * {@link sirius.biz.process.logs.ProcessLog Log entries} are associated with this output by containing this
     * name in {@link sirius.biz.process.logs.ProcessLog#OUTPUT}.
     */
    private String name;

    /**
     * Contains the label of the output shown to the user.
     */
    private String label;

    /**
     * Contains the name of a {@link ProcessOutputType} which is used to visualize the collected output.
     */
    private String type;

    /**
     * Determines if this is a system output which is not shown to "normal" users (ones which don't have
     * {@link sirius.biz.process.ProcessController#PERMISSION_MANAGE_ALL_PROCESSES}).
     */
    private boolean systemOutput = false;

    /**
     * Contains additional metadata used by the {@link ProcessOutputType} to render the output.
     */
    private final StringMap context = new StringMap();

    @Part
    private static GlobalContext globalContext;

    /**
     * Contains an inline cache which keeps the icon for each known {@link ProcessOutputType} to prevent some lookups.
     */
    private static final Map<String, String> typeToIcons = new ConcurrentHashMap<>();

    public String getIcon() {
        if (isSystemOutput()) {
            return "fa-solid fa-lock";
        }
        return typeToIcons.computeIfAbsent(type, this::computeIcon);
    }

    private String computeIcon(String outputType) {
        return Optional.of(globalContext.getPart(outputType, ProcessOutputType.class))
                       .map(ProcessOutputType::getIcon)
                       .orElse("fa-solid fa-bars");
    }

    /**
     * Specifies the name of this output.
     *
     * @param name the name of this output
     * @return the output itself for fluent method calls
     */
    public ProcessOutput withName(String name) {
        this.name = name;
        return this;
    }

    /**
     * Specifies the label of this output.
     *
     * @param label the label which will be {@link NLS#smartGet(String) auto translated}
     * @return the output itself for fluent method calls
     */
    public ProcessOutput withLabel(String label) {
        this.label = label;
        return this;
    }

    /**
     * Specifies the name of the {@link ProcessOutputType} used to render this output.
     *
     * @param type the name of the {@link ProcessOutputType}
     * @return the output itself for fluent method calls
     */
    public ProcessOutput withType(String type) {
        this.type = type;
        return this;
    }

    /**
     * Marks this ProcessOutput as system output which is not shown to "normal" users (ones which don't have
     * {@link sirius.biz.process.ProcessController#PERMISSION_MANAGE_ALL_PROCESSES}).
     *
     * @return the output itself for fluent method calls
     */
    public ProcessOutput asSystemOutput() {
        this.systemOutput = true;
        return this;
    }

    public StringMap getContext() {
        return context;
    }

    public String getType() {
        return type;
    }

    public String getName() {
        return name;
    }

    public String getLabel() {
        return NLS.smartGet(label);
    }

    public boolean isSystemOutput() {
        return systemOutput;
    }
}
